{
  "version": 3,
  "sources": ["../src/env.ts", "../src/api/openai_api.ts", "../src/utils/helpers.ts", "../src/utils/i18n.ts", "../src/api/image_generation.ts", "../src/api/flux-cf.ts", "../src/api/openai_compatible.ts", "../src/config/commands.ts", "../src/utils/redis.ts", "../src/api/gemini.ts", "../src/api/groq.ts", "../src/api/claude.ts", "../src/api/azure.ts", "../src/api/image_analyze.ts", "../src/api/telegram.ts", "../src/index.ts"],
  "sourceRoot": "dist",
  "sourcesContent": ["export interface Env {\n  OPENAI_API_KEY: string;\n  OPENAI_BASE_URL: string;\n  OPENAI_MODELS: string; // Comma-separated list of available OpenAI models\n  TELEGRAM_BOT_TOKEN: string;\n  WHITELISTED_USERS: string; // Comma-separated list of allowed Telegram user IDs\n  SYSTEM_INIT_MESSAGE: string;\n  SYSTEM_INIT_MESSAGE_ROLE: string;\n  DEFAULT_MODEL?: string; // Optional default model\n  UPSTASH_REDIS_REST_URL: string;\n  UPSTASH_REDIS_REST_TOKEN: string;\n  DALL_E_MODEL?: string;\n  CLOUDFLARE_API_TOKEN: string;\n  CLOUDFLARE_ACCOUNT_ID: string;\n  FLUX_STEPS: string;\n  PROMPT_OPTIMIZATION?: string;\n  EXTERNAL_API_BASE?: string;\n  EXTERNAL_MODEL?: string;\n  EXTERNAL_API_KEY?: string;\n  GOOGLE_MODEL_KEY: string;\n  GOOGLE_MODEL_BASEURL?: string;\n  GOOGLE_MODELS: string;\n  GROQ_API_KEY: string;\n  GROQ_MODELS: string;\n  CLAUDE_API_KEY: string;\n  CLAUDE_MODELS: string;\n  CLAUDE_ENDPOINT?: string;\n  AZURE_API_KEY: string;       // Azure API \u5BC6\u94A5\n  AZURE_MODELS: string;        // \u9017\u53F7\u5206\u9694\u7684 Azure \u6A21\u578B\u5217\u8868\n  AZURE_ENDPOINT: string;      // Azure API \u7AEF\u70B9\n  OPENAI_COMPATIBLE_KEY?: string;\n  OPENAI_COMPATIBLE_URL?: string;\n  OPENAI_COMPATIBLE_MODELS?: string;\n}\n\nconst getEnvOrDefault = (env: Env, key: keyof Env, defaultValue: string): string => {\n  return (env[key] as string) || defaultValue;\n};\n\nexport const getConfig = (env: Env) => {\n  // \u68C0\u67E5\u662F\u5426\u81F3\u5C11\u6709\u4E00\u4E2A\u6A21\u578B\u7684 API \u5BC6\u94A5\u88AB\u8BBE\u7F6E\n  const hasOpenAI = !!env.OPENAI_API_KEY;\n  const hasGoogle = !!env.GOOGLE_MODEL_KEY;\n  const hasGroq = !!env.GROQ_API_KEY;\n  const hasClaude = !!env.CLAUDE_API_KEY;\n  const hasAzure = !!env.AZURE_API_KEY;\n  const hasOpenAICompatible = !!env.OPENAI_COMPATIBLE_KEY && !!env.OPENAI_COMPATIBLE_URL;\n\n  if (!hasOpenAI && !hasGoogle && !hasGroq && !hasClaude && !hasAzure && !hasOpenAICompatible) {\n    throw new Error('At least one model API key must be set (OpenAI, Google, Groq, Claude, Azure, or OpenAI Compatible)');\n  }\n\n  return {\n    openaiApiKey: env.OPENAI_API_KEY,\n    openaiBaseUrl: getEnvOrDefault(env, 'OPENAI_BASE_URL', 'https://api.openai.com/v1'),\n    openaiModels: env.OPENAI_MODELS ? env.OPENAI_MODELS.split(',').map(model => model.trim()) : [],\n    telegramBotToken: env.TELEGRAM_BOT_TOKEN,\n    whitelistedUsers: env.WHITELISTED_USERS ? env.WHITELISTED_USERS.split(',').map(id => id.trim()) : [],\n    systemInitMessage: getEnvOrDefault(env, 'SYSTEM_INIT_MESSAGE', 'You are a helpful assistant.'),\n    systemInitMessageRole: getEnvOrDefault(env, 'SYSTEM_INIT_MESSAGE_ROLE', 'system'),\n    defaultModel: env.DEFAULT_MODEL,\n    upstashRedisRestUrl: env.UPSTASH_REDIS_REST_URL,\n    upstashRedisRestToken: env.UPSTASH_REDIS_REST_TOKEN,\n    dallEModel: getEnvOrDefault(env, 'DALL_E_MODEL', 'dall-e-3'),\n    languageTTL: 60 * 60 * 24 * 365,\n    contextTTL: 60 * 60 * 24 * 30,\n    cloudflareApiToken: env.CLOUDFLARE_API_TOKEN,\n    cloudflareAccountId: env.CLOUDFLARE_ACCOUNT_ID,\n    fluxSteps: parseInt(getEnvOrDefault(env, 'FLUX_STEPS', '4')),\n    promptOptimization: getEnvOrDefault(env, 'PROMPT_OPTIMIZATION', 'false') === 'true',\n    externalApiBase: env.EXTERNAL_API_BASE,\n    externalModel: env.EXTERNAL_MODEL,\n    externalApiKey: env.EXTERNAL_API_KEY,\n    googleModelKey: env.GOOGLE_MODEL_KEY,\n    googleModelBaseUrl: getEnvOrDefault(env, 'GOOGLE_MODEL_BASEURL', 'https://generativelanguage.googleapis.com/v1beta'),\n    googleModels: env.GOOGLE_MODELS ? env.GOOGLE_MODELS.split(',').map(model => model.trim()) : [],\n    groqApiKey: env.GROQ_API_KEY,\n    groqModels: env.GROQ_MODELS ? env.GROQ_MODELS.split(',').map(model => model.trim()) : [],\n    claudeApiKey: env.CLAUDE_API_KEY,\n    claudeModels: env.CLAUDE_MODELS ? env.CLAUDE_MODELS.split(',').map(model => model.trim()) : [],\n    claudeEndpoint: getEnvOrDefault(env, 'CLAUDE_ENDPOINT', 'https://api.anthropic.com/v1'),\n    azureApiKey: env.AZURE_API_KEY,\n    azureModels: env.AZURE_MODELS ? env.AZURE_MODELS.split(',').map(model => model.trim()) : [],\n    azureEndpoint: env.AZURE_ENDPOINT,\n    openaiCompatibleKey: env.OPENAI_COMPATIBLE_KEY,\n    openaiCompatibleUrl: env.OPENAI_COMPATIBLE_URL,\n    openaiCompatibleModels: env.OPENAI_COMPATIBLE_MODELS ? env.OPENAI_COMPATIBLE_MODELS.split(',').map(model => model.trim()) : [],\n  };\n};\n", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\n\nexport interface Message {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\ninterface ChatCompletionResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: {\n    index: number;\n    message: Message;\n    finish_reason: string;\n  }[];\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport class OpenAIAPI implements ModelAPIInterface {\n  private apiKey: string;\n  private baseUrl: string;\n  private models: string[];\n  private defaultModel: string;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiKey = config.openaiApiKey;\n    this.baseUrl = config.openaiBaseUrl;\n    this.models = config.openaiModels;\n    this.defaultModel = config.defaultModel || this.models[0];\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    const url = `${this.baseUrl}/chat/completions`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: model || this.defaultModel,\n        messages: messages,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.statusText}`);\n    }\n\n    const data: ChatCompletionResponse = await response.json();\n    return data.choices[0].message.content.trim();\n  }\n\n  isValidModel(model: string): boolean {\n    return this.models.includes(model);\n  }\n\n  getDefaultModel(): string {\n    return this.defaultModel;\n  }\n\n  getAvailableModels(): string[] {\n    return this.models;\n  }\n}\n\nexport default OpenAIAPI;", "import { Env } from '../env';\r\n\r\nexport function formatCodeBlock(code: string, language: string): string {\r\n  return `\\`\\`\\`${language}\\n${code}\\n\\`\\`\\``;\r\n}\r\n\r\nexport function splitMessage(text: string, maxLength: number = 4096): string[] {\r\n  const messages: string[] = [];\r\n  let currentMessage = '';\r\n\r\n  const lines = text.split('\\n');\r\n\r\n  for (const line of lines) {\r\n    if (currentMessage.length + line.length + 1 > maxLength) {\r\n      messages.push(currentMessage.trim());\r\n      currentMessage = '';\r\n    }\r\n    currentMessage += line + '\\n';\r\n  }\r\n\r\n  if (currentMessage.trim()) {\r\n    messages.push(currentMessage.trim());\r\n  }\r\n\r\n  return messages;\r\n}\r\n\r\nexport function escapeMarkdown(text: string): string {\r\n  const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];\r\n  return specialChars.reduce((acc, char) => acc.replace(new RegExp(`\\\\${char}`, 'g'), `\\\\${char}`), text);\r\n}\r\n\r\nexport async function sendChatAction(chatId: number, action: string, env: Env): Promise<void> {\r\n  const token = env.TELEGRAM_BOT_TOKEN;\r\n  const url = `https://api.telegram.org/bot${token}/sendChatAction`;\r\n  await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      chat_id: chatId,\r\n      action: action,\r\n    }),\r\n  });\r\n}", "export type SupportedLanguages = 'en' | 'zh' | 'es' | 'zh-TW' | 'ja' | 'de' | 'fr' | 'ru';\r\n\r\nexport interface Translations {\r\n  welcome: string;\r\n  unauthorized: string;\r\n  error: string;\r\n  current_language: string;\r\n  language_changed: string;\r\n  new_conversation: string;\r\n  no_history: string;\r\n  history_summary: string;\r\n  current_model: string;\r\n  available_models: string;\r\n  model_changed: string;\r\n  help_intro: string;\r\n  start_description: string;\r\n  language_description: string;\r\n  new_description: string;\r\n  history_description: string;\r\n  switchmodel_description: string;\r\n  help_description: string;\r\n  choose_language: string;\r\n  choose_model: string;\r\n  language_en: string;\r\n  language_zh: string;\r\n  language_es: string;\r\n  'language_zh-TW': string;  // \u4FEE\u6539\u8FD9\u91CC\r\n  language_ja: string;\r\n  language_de: string;\r\n  language_fr: string;\r\n  language_ru: string;\r\n  image_prompt_required: string;\r\n  image_generation_error: string;\r\n  img_description: string;\r\n  invalid_size: string;\r\n  flux_description: string;\r\n  flux_usage: string;\r\n  invalid_aspect_ratio: string;\r\n  original_prompt: string;\r\n  prompt_generation_model: string;\r\n  optimized_prompt: string;\r\n  image_specs: string;\r\n  command_not_found: string;\r\n  image_analysis_not_supported: string;\r\n  image_analysis_error: string;\r\n  image_analysis_description: string;\r\n}\r\n\r\nexport type TranslationKey = keyof Translations;\r\n\r\ntype TranslationsMap = Record<SupportedLanguages, Translations>;\r\n\r\nconst translations: TranslationsMap = {\r\n  en: {\r\n    welcome: \"\uD83D\uDC4B Hey there! Welcome to your personal AI assistant bot!\",\r\n    unauthorized: \"\uD83D\uDEAB Oops! Looks like you don't have access to this bot yet.\",\r\n    error: \"\uD83D\uDE05 Whoops! Something went wrong. Wanna give it another shot?\",\r\n    current_language: \"\uD83C\uDF0D You're currently chatting in English\",\r\n    language_changed: \"\uD83C\uDF89 Awesome! Your language is now set to: \",\r\n    new_conversation: \"\uD83C\uDD95 Alright, let's start fresh! I've cleared our previous chat.\",\r\n    no_history: \"\uD83E\uDD14 Hmm... Looks like we haven't chatted before.\",\r\n    history_summary: \"\uD83D\uDCDC Here's a quick recap of our previous chats:\",\r\n    current_model: \"\uD83E\uDD16 You're currently using this AI model: \",\r\n    available_models: \"\uD83D\uDD22 Check out all these cool models we have: \",\r\n    model_changed: \"\uD83D\uDD04 Model swap successful! We're now using: \",\r\n    help_intro: \"\uD83E\uDDED Here's what I can do for you:\",\r\n    start_description: \"\uD83D\uDE80 Say hi and let's start chatting\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F Want to switch languages? Use this\",\r\n    new_description: \"\uD83D\uDD04 Start a brand new conversation\",\r\n    history_description: \"\uD83D\uDCDA Take a look at what we've chatted about\",\r\n    switchmodel_description: \"\uD83D\uDD00 Try a different AI model\",\r\n    help_description: \"\u2753 See all available commands\",\r\n    choose_language: \"\uD83C\uDF10 Which language would you like to chat in?\",\r\n    choose_model: \"\uD83E\uDD16 Pick an AI model to chat with:\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 English\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 Chinese\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 Spanish\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC Chinese (Traditional)\",  // \u4FEE\u6539\u8FD9\u91CC\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 Japanese\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA German\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 French\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA Russian\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F To create an image, tell me what you'd like to see!\",\r\n    image_generation_error: \"\uD83D\uDE1E Uh-oh, there was a hiccup creating the image. Mind trying again?\",\r\n    img_description: \"\uD83C\uDFA8 Create amazing images with DALL\u00B7E\",\r\n    invalid_size: \"\uD83D\uDCCF Oops, that size doesn't work. How about trying one of these: \",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F Create beautiful images using Flux\",\r\n    flux_usage: \"\uD83D\uDCDD Here's how to use it: /flux <description> [aspect ratio]. You can choose from these ratios: 1:1 (default), 1:2, 3:2, 3:4, 16:9, 9:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 That aspect ratio isn't quite right. You can pick from these: \",\r\n    original_prompt: \"\uD83C\uDFA8 Original Description\",\r\n    prompt_generation_model: \"\uD83D\uDCAC Prompt Generation Model\",\r\n    optimized_prompt: \"\uD83C\uDF10 Enhanced Description\",\r\n    image_specs: \"\uD83D\uDCD0 Image Details\",\r\n    command_not_found: \"\u2753 Hmm, I don't know that command. Type /help to see what I can do!\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB The current model does not support image analysis. Please switch to a model that supports multi-modal input.\",\r\n    image_analysis_error: \"\u274C Oops! An error occurred during image analysis. Please try again later.\",\r\n    image_analysis_description: \"\uD83D\uDCF8 Analyze images: Send a photo with a caption like 'Please analyze this image'. The bot will use the current AI model (OpenAI or Google Gemini) to analyze it and reply with the results.\",\r\n  },\r\n  zh: {\r\n    welcome: \"\uD83D\uDC4B \u563F\uFF0C\u6B22\u8FCE\u4F7F\u7528\u4F60\u7684\u4E13\u5C5E\u52A9\u624B\u673A\u5668\u4EBA\uFF01\",\r\n    unauthorized: \"\uD83D\uDEAB \u62B1\u6B49\uFF0C\u60A8\u8FD8\u6CA1\u6709\u6743\u9650\u4F7F\u7528\u8FD9\u4E2A\u673A\u5668\u4EBA\u54E6\u3002\",\r\n    error: \"\uD83D\uDE05 \u54CE\u5440\uFF0C\u51FA\u4E86\u70B9\u5C0F\u95EE\u9898\u3002\u8981\u4E0D\u8981\u518D\u8BD5\u4E00\u6B21\uFF1F\",\r\n    current_language: \"\uD83C\uDF0D \u60A8\u5F53\u524D\u7684\u8BED\u8A00\u8BBE\u7F6E\u662F\uFF1A\u4E2D\u6587\",\r\n    language_changed: \"\uD83C\uDF89 \u592A\u597D\u4E86\uFF01\u8BED\u8A00\u5DF2\u7ECF\u5207\u6362\u4E3A\uFF1A\",\r\n    new_conversation: \"\uD83C\uDD95 \u597D\u7684\uFF0C\u8BA9\u6211\u4EEC\u5F00\u59CB\u4E00\u6BB5\u5168\u65B0\u7684\u5BF9\u8BDD\u5427\uFF01\u4E4B\u524D\u7684\u804A\u5929\u8BB0\u5F55\u5DF2\u7ECF\u6E05\u9664\u5566\u3002\",\r\n    no_history: \"\uD83E\uDD14 \u55EF...\u770B\u8D77\u6765\u6211\u4EEC\u8FD8\u6CA1\u6709\u804A\u8FC7\u5929\u5462\u3002\",\r\n    history_summary: \"\uD83D\uDCDC \u6765\u56DE\u987E\u4E00\u4E0B\u6211\u4EEC\u4E4B\u524D\u804A\u4E86\u4E9B\u4EC0\u4E48\uFF1A\",\r\n    current_model: \"\uD83E\uDD16 \u60A8\u73B0\u5728\u4F7F\u7528\u7684 AI \u6A21\u578B\u662F\uFF1A\",\r\n    available_models: \"\uD83D\uDD22 \u54C7\uFF0C\u6211\u4EEC\u6709\u8FD9\u4E48\u591A\u6A21\u578B\u53EF\u4EE5\u9009\u62E9\uFF1A\",\r\n    model_changed: \"\uD83D\uDD04 \u6362\u6A21\u578B\u6210\u529F\uFF01\u73B0\u5728\u6211\u4EEC\u4F7F\u7528\u7684\u662F\uFF1A\",\r\n    help_intro: \"\uD83E\uDDED \u6765\u770B\u770B\u6211\u90FD\u80FD\u505A\u4E9B\u4EC0\u4E48\u5427\uFF1A\",\r\n    start_description: \"\uD83D\uDE80 \u548C\u6211\u6253\u4E2A\u62DB\u547C\uFF0C\u5F00\u59CB\u804A\u5929\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F \u60F3\u6362\u4E2A\u8BED\u8A00\uFF1F\u7528\u8FD9\u4E2A\",\r\n    new_description: \"\uD83D\uDD04 \u5F00\u59CB\u5168\u65B0\u7684\u5BF9\u8BDD\",\r\n    history_description: \"\uD83D\uDCDA \u56DE\u987E\u4E00\u4E0B\u6211\u4EEC\u4E4B\u524D\u804A\u4E86\u4EC0\u4E48\",\r\n    switchmodel_description: \"\uD83D\uDD00 \u6362\u4E2A\u6A21\u578B\u6765\u804A\u5929\",\r\n    help_description: \"\u2753 \u67E5\u770B\u6240\u6709\u53EF\u7528\u7684\u547D\u4EE4\",\r\n    choose_language: \"\uD83C\uDF10 \u4F60\u60F3\u7528\u54EA\u79CD\u8BED\u8A00\u548C\u6211\u804A\u5929\u5462\uFF1F\",\r\n    choose_model: \"\uD83E\uDD16 \u6765\u9009\u62E9\u4E00\u4E2A AI \u6A21\u578B\u5427\uFF1A\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 \u82F1\u8BED\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 \u7B80\u4F53\u4E2D\u6587\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 \u897F\u73ED\u7259\u8BED\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC Chinese (Traditional)\",  // \u4FEE\u6539\u8FD9\u91CC\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 Japanese\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA German\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 French\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA Russian\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F \u8981\u521B\u5EFA\u56FE\u50CF\uFF0C\u8BF7\u544A\u8BC9\u6211\u4F60\u60F3\u770B\u5230\u4EC0\u4E48~\",\r\n    image_generation_error: \"\uD83D\uDE1E \u54CE\u5440\uFF0C\u521B\u5EFA\u56FE\u50CF\u65F6\u51FA\u73B0\u4E86\u95EE\u9898\u3002\u8981\u4E0D\u8981\u518D\u8BD5\u4E00\u6B21\uFF1F\",\r\n    img_description: \"\uD83C\uDFA8 \u4F7F\u7528 DALL\u00B7E \u521B\u5EFA\u60CA\u4EBA\u7684\u56FE\u50CF\",\r\n    invalid_size: \"\uD83D\uDCCF \u54CE\u5440\uFF0C\u8FD9\u4E2A\u5C3A\u5BF8\u4E0D\u884C\u3002\u4E0D\u5982\u8BD5\u8BD5\u8FD9\u4E9B\uFF1A\",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F \u4F7F\u7528 Flux \u521B\u5EFA\u7F8E\u4E3D\u7684\u56FE\u50CF\",\r\n    flux_usage: \"\uD83D\uDCDD \u4EE5\u4E0B\u662F\u4F7F\u7528\u65B9\u6CD5\uFF1A/flux <\u63CF\u8FF0> [\u957F\u5BBD\u6BD4]\u3002\u4F60\u53EF\u4EE5\u4ECE\u8FD9\u4E9B\u6BD4\u4F8B\u4E2D\u9009\u62E9\uFF1A1:1\uFF08\u9ED8\u8BA4\uFF09\u30011:2\u30013:2\u30013:4\u300116:9\u30019:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 \u8FD9\u4E2A\u957F\u5BBD\u6BD4\u4E0D\u592A\u5BF9\u3002\u4F60\u53EF\u4EE5\u4ECE\u8FD9\u4E9B\u4E2D\u9009\u62E9\uFF1A\",\r\n    original_prompt: \"\uD83C\uDFA8 \u539F\u59CB\u63CF\u8FF0\",\r\n    prompt_generation_model: \"\uD83D\uDCAC \u63D0\u793A\u751F\u6210\u6A21\u578B\",\r\n    optimized_prompt: \"\uD83C\uDF10 \u4F18\u5316\u540E\u7684\u63CF\u8FF0\",\r\n    image_specs: \"\uD83D\uDCD0 \u56FE\u50CF\u8BE6\u60C5\",\r\n    command_not_found: \"\u2753 \u55EF\uFF0C\u6211\u4E0D\u8BA4\u8BC6\u8FD9\u4E2A\u547D\u4EE4\u3002\u8F93\u5165 /help \u770B\u770B\u6211\u80FD\u505A\u4EC0\u4E48\uFF01\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB \u5F53\u524D\u6A21\u578B\u4E0D\u652F\u6301\u56FE\u50CF\u5206\u6790\u3002\u8BF7\u5207\u6362\u5230\u652F\u6301\u591A\u6A21\u6001\u8F93\u5165\u7684\u6A21\u578B\u3002\",\r\n    image_analysis_error: \"\u274C \u7CDF\u7CD5\uFF01\u56FE\u50CF\u5206\u6790\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF\u3002\u8BF7\u7A0D\u540E\u518D\u8BD5\u3002\",\r\n    image_analysis_description: \"\uD83D\uDCF8 \u56FE\u7247\u5206\u6790\uFF1A\u53D1\u9001\u4E00\u5F20\u7167\u7247\uFF0C\u5E76\u5728\u8BF4\u660E\u4E2D\u6DFB\u52A0\u7C7B\u4F3C\u300C\u8BF7\u5206\u6790\u8FD9\u5F20\u56FE\u7247\u300D\u7684\u63D0\u793A\u3002\u673A\u5668\u4EBA\u5C06\u4F7F\u7528\u5F53\u524D\u9009\u62E9\u7684 AI \u6A21\u578B\uFF08OpenAI \u6216 Google Gemini\uFF09\u8FDB\u884C\u5206\u6790\uFF0C\u5E76\u56DE\u590D\u5206\u6790\u7ED3\u679C\u3002\",\r\n  },\r\n  es: {\r\n    welcome: \"\uD83D\uDC4B \u00A1Hola! \u00A1Bienvenido a tu bot asistente personal con IA!\",\r\n    unauthorized: \"\uD83D\uDEAB \u00A1Ups! Parece que a\u00FAn no tienes acceso a este bot.\",\r\n    error: \"\uD83D\uDE05 \u00A1Vaya! Algo sali\u00F3 mal. \u00BFQuieres intentarlo de nuevo?\",\r\n    current_language: \"\uD83C\uDF0D Est\u00E1s chateando en espa\u00F1ol\",\r\n    language_changed: \"\uD83C\uDF89 \u00A1Genial! Tu idioma ahora es: \",\r\n    new_conversation: \"\uD83C\uDD95 \u00A1Perfecto, empecemos de cero! He borrado nuestra charla anterior.\",\r\n    no_history: \"\uD83E\uDD14 Mmm... Parece que a\u00FAn no hemos charlado.\",\r\n    history_summary: \"\uD83D\uDCDC Aqu\u00ED tienes un resumen de nuestras conversaciones anteriores:\",\r\n    current_model: \"\uD83E\uDD16 Est\u00E1s usando este modelo de IA: \",\r\n    available_models: \"\uD83D\uDD22 Mira todos estos modelos geniales que tenemos: \",\r\n    model_changed: \"\uD83D\uDD04 \u00A1Cambio de modelo exitoso! Ahora estamos usando: \",\r\n    help_intro: \"\uD83E\uDDED Esto es lo que puedo hacer por ti:\",\r\n    start_description: \"\uD83D\uDE80 Saluda y empecemos a charlar\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F \u00BFQuieres cambiar de idioma? Usa esto\",\r\n    new_description: \"\uD83D\uDD04 Iniciar una conversaci\u00F3n totalmente nueva\",\r\n    history_description: \"\uD83D\uDCDA Echa un vistazo a lo que hemos hablado\",\r\n    switchmodel_description: \"\uD83D\uDD00 Prueba un modelo de IA diferente\",\r\n    help_description: \"\u2753 Ver todos los comandos disponibles\",\r\n    choose_language: \"\uD83C\uDF10 \u00BFEn qu\u00E9 idioma te gustar\u00EDa chatear?\",\r\n    choose_model: \"\uD83E\uDD16 Elige un modelo de IA para charlar:\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 Ingl\u00E9s\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 Chino\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 Espa\u00F1ol\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC Chinese (Traditional)\",  // \u4FEE\u6539\u8FD9\u91CC\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 Japanese\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA German\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 French\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA Russian\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F Para crear una imagen, \u00A1dime qu\u00E9 te gustar\u00EDa ver!\",\r\n    image_generation_error: \"\uD83D\uDE1E Vaya, hubo un problemilla al crear la imagen. \u00BFTe importar\u00EDa intentarlo de nuevo?\",\r\n    img_description: \"\uD83C\uDFA8 Crea im\u00E1genes incre\u00EDbles con DALL\u00B7E\",\r\n    invalid_size: \"\uD83D\uDCCF Ups, ese tama\u00F1o no funciona. \u00BFQu\u00E9 tal si pruebas uno de estos?: \",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F Crea hermosas im\u00E1genes usando Flux\",\r\n    flux_usage: \"\uD83D\uDCDD As\u00ED es como se usa: /flux <descripci\u00F3n> [relaci\u00F3n de aspecto]. Puedes elegir entre estas relaciones: 1:1 (predeterminado), 1:2, 3:2, 3:4, 16:9, 9:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 Esa relaci\u00F3n de aspecto no es correcta. Puedes elegir entre estas: \",\r\n    original_prompt: \"\uD83C\uDFA8 Descripci\u00F3n Original\",\r\n    prompt_generation_model: \"\uD83D\uDCAC Modelo de Generaci\u00F3n de Prompts\",\r\n    optimized_prompt: \"\uD83C\uDF10 Descripci\u00F3n Mejorada\",\r\n    image_specs: \"\uD83D\uDCD0 Detalles de la Imagen\",\r\n    command_not_found: \"\u2753 Mmm, no conozco ese comando. \u00A1Escribe /help para ver lo que puedo hacer!\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB El modelo actual no admite an\u00E1lisis de im\u00E1genes. Por favor, cambie a un modelo que admita entrada multimodal.\",\r\n    image_analysis_error: \"\u274C \u00A1Ups! Ocurri\u00F3 un error durante el an\u00E1lisis de la imagen. Por favor, int\u00E9ntelo de nuevo m\u00E1s tarde.\",\r\n    image_analysis_description: \"\uD83D\uDCF8 Analizar im\u00E1genes: Env\u00EDa una foto con un pie de foto como 'Por favor, analiza esta imagen'. El bot utilizar\u00E1 el modelo de IA actual (OpenAI o Google Gemini) para analizarla y responder\u00E1 con los resultados.\",\r\n  },\r\n  'zh-TW': {\r\n    welcome: \"\uD83D\uDC4B \u55E8\uFF0C\u6B61\u8FCE\u4F7F\u7528\u4F60\u7684\u5C08\u5C6C\u52A9\u624B\u6A5F\u5668\u4EBA\uFF01\",\r\n    unauthorized: \"\uD83D\uDEAB \u62B1\u6B49\uFF0C\u60A8\u9084\u6C92\u6709\u6B0A\u9650\u4F7F\u7528\u9019\u500B\u6A5F\u5668\u4EBA\u5594\u3002\",\r\n    error: \"\uD83D\uDE05 \u54CE\u5440\uFF0C\u51FA\u4E86\u9EDE\u5C0F\u554F\u984C\u3002\u8981\u4E0D\u8981\u518D\u8A66\u4E00\u6B21\uFF1F\",\r\n    current_language: \"\uD83C\uDF0D \u60A8\u7576\u524D\u7684\u8A9E\u8A00\u8A2D\u7F6E\u662F\uFF1A\u7E41\u9AD4\u4E2D\u6587\",\r\n    language_changed: \"\uD83C\uDF89 \u592A\u597D\u4E86\uFF01\u8A9E\u8A00\u5DF2\u7D93\u5207\u63DB\u70BA\uFF1A\",\r\n    new_conversation: \"\uD83C\uDD95 \u597D\u7684\uFF0C\u8B93\u6211\u5011\u958B\u59CB\u4E00\u6BB5\u5168\u65B0\u7684\u5C0D\u8A71\u5427\uFF01\u4E4B\u524D\u7684\u804A\u5929\u8A18\u9304\u5DF2\u7D93\u6E05\u9664\u5566\u3002\",\r\n    no_history: \"\uD83E\uDD14 \u55EF...\u770B\u8D77\u4F86\u6211\u5011\u9084\u6C92\u6709\u804A\u904E\u5929\u5462\u3002\",\r\n    history_summary: \"\uD83D\uDCDC \u4F86\u56DE\u9867\u4E00\u4E0B\u6211\u5011\u4E4B\u524D\u804A\u4E86\u4E9B\u4EC0\u9EBC\uFF1A\",\r\n    current_model: \"\uD83E\uDD16 \u60A8\u73FE\u5728\u4F7F\u7528\u7684 AI \u6A21\u578B\u662F\uFF1A\",\r\n    available_models: \"\uD83D\uDD22 \u54C7\uFF0C\u6211\u5011\u6709\u9019\u9EBC\u591A\u6A21\u578B\u53EF\u4EE5\u9078\u64C7\uFF1A\",\r\n    model_changed: \"\uD83D\uDD04 \u63DB\u6A21\u578B\u6210\u529F\uFF01\u73FE\u5728\u6211\u5011\u4F7F\u7528\u7684\u662F\uFF1A\",\r\n    help_intro: \"\uD83E\uDDED \u4F86\u770B\u770B\u6211\u90FD\u80FD\u505A\u4E9B\u4EC0\u9EBC\u5427\uFF1A\",\r\n    start_description: \"\uD83D\uDE80 \u548C\u6211\u6253\u500B\u62DB\u547C\uFF0C\u958B\u59CB\u804A\u5929\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F \u60F3\u63DB\u500B\u8A9E\u8A00\uFF1F\u7528\u9019\u500B\",\r\n    new_description: \"\uD83D\uDD04 \u958B\u59CB\u5168\u65B0\u7684\u5C0D\u8A71\",\r\n    history_description: \"\uD83D\uDCDA \u56DE\u9867\u4E00\u4E0B\u6211\u5011\u4E4B\u524D\u804A\u4E86\u4EC0\u9EBC\",\r\n    switchmodel_description: \"\uD83D\uDD00 \u63DB\u500B\u6A21\u578B\u4F86\u804A\u5929\",\r\n    help_description: \"\u2753 \u67E5\u770B\u6240\u6709\u53EF\u7528\u7684\u547D\u4EE4\",\r\n    choose_language: \"\uD83C\uDF10 \u4F60\u60F3\u7528\u54EA\u7A2E\u8A9E\u8A00\u548C\u6211\u804A\u5929\u5462\uFF1F\",\r\n    choose_model: \"\uD83E\uDD16 \u4F86\u9078\u64C7\u4E00\u500B AI \u6A21\u578B\u5427\uFF1A\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 \u82F1\u8A9E\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 \u7C21\u9AD4\u4E2D\u6587\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 \u897F\u73ED\u7259\u8A9E\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC \u7E41\u9AD4\u4E2D\u6587\",\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 \u65E5\u8A9E\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA \u5FB7\u8A9E\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 \u6CD5\u8A9E\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA \u4FC4\u8A9E\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F \u8981\u5275\u5EFA\u5716\u50CF\uFF0C\u8ACB\u544A\u8A34\u6211\u4F60\u60F3\u770B\u5230\u4EC0\u9EBC\uFF01\",\r\n    image_generation_error: \"\uD83D\uDE1E \u54CE\u5440\uFF0C\u5275\u5EFA\u5716\u50CF\u6642\u51FA\u4E86\u9EDE\u554F\u984C\u3002\u8981\u4E0D\u8981\u518D\u8A66\u4E00\u6B21\uFF1F\",\r\n    img_description: \"\uD83C\uDFA8 \u4F7F\u7528 DALL\u00B7E \u5275\u5EFA\u9A5A\u4EBA\u7684\u5716\u50CF\",\r\n    invalid_size: \"\uD83D\uDCCF \u54CE\u5440\uFF0C\u9019\u500B\u5C3A\u5BF8\u4E0D\u884C\u3002\u4E0D\u5982\u8A66\u8A66\u9019\u4E9B\uFF1A\",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F \u4F7F\u7528 Flux \u5275\u5EFA\u7F8E\u9E97\u7684\u5716\u50CF\",\r\n    flux_usage: \"\uD83D\uDCDD \u4EE5\u4E0B\u662F\u4F7F\u7528\u65B9\u6CD5\uFF1A/flux <\u63CF\u8FF0> [\u9577\u5BEC\u6BD4]\u3002\u4F60\u53EF\u4EE5\u5F9E\u9019\u4E9B\u6BD4\u4F8B\u4E2D\u9078\u64C7\uFF1A1:1\uFF08\u9ED8\u8A8D\uFF09\u30011:2\u30013:2\u30013:4\u300116:9\u30019:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 \u9019\u500B\u9577\u5BEC\u6BD4\u4E0D\u592A\u5C0D\u3002\u4F60\u53EF\u4EE5\u5F9E\u9019\u4E9B\u4E2D\u9078\u64C7\uFF1A\",\r\n    original_prompt: \"\uD83C\uDFA8 \u539F\u59CB\u63CF\u8FF0\",\r\n    prompt_generation_model: \"\uD83D\uDCAC \u63D0\u793A\u751F\u6210\u6A21\u578B\",\r\n    optimized_prompt: \"\uD83C\uDF10 \u512A\u5316\u5F8C\u7684\u63CF\u8FF0\",\r\n    image_specs: \"\uD83D\uDCD0 \u5716\u50CF\u8A73\u60C5\",\r\n    command_not_found: \"\u2753 \u55EF\uFF0C\u6211\u4E0D\u8A8D\u8B58\u9019\u500B\u547D\u4EE4\u3002\u8F38\u5165 /help \u770B\u770B\u6211\u80FD\u505A\u4EC0\u9EBC\uFF01\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB \u7576\u524D\u6A21\u578B\u4E0D\u652F\u6301\u5716\u50CF\u5206\u6790\u3002\u8ACB\u5207\u63DB\u5230\u652F\u6301\u591A\u6A21\u614B\u8F38\u5165\u7684\u6A21\u578B\u3002\",\r\n    image_analysis_error: \"\u274C \u7CDF\u7CD5\uFF01\u5716\u50CF\u5206\u6790\u904E\u7A0B\u4E2D\u767C\u751F\u932F\u8AA4\u3002\u8ACB\u7A0D\u5F8C\u518D\u8A66\u3002\",\r\n    image_analysis_description: \"\uD83D\uDCF8 \u5716\u7247\u5206\u6790\uFF1A\u767C\u9001\u4E00\u5F35\u7167\u7247\uFF0C\u4E26\u5728\u8AAA\u660E\u4E2D\u6DFB\u52A0\u985E\u4F3C\u300C\u8ACB\u5206\u6790\u9019\u5F35\u5716\u7247\u300D\u7684\u63D0\u793A\u3002\u6A5F\u5668\u4EBA\u5C07\u4F7F\u7528\u7576\u524D\u9078\u64C7\u7684 AI \u6A21\u578B\uFF08OpenAI \u6216 Google Gemini\uFF09\u9032\u884C\u5206\u6790\uFF0C\u4E26\u56DE\u8986\u5206\u6790\u7D50\u679C\u3002\",\r\n  },\r\n  ja: {\r\n    welcome: \"\uD83D\uDC4B \u3053\u3093\u306B\u3061\u306F\uFF01\u3042\u306A\u305F\u5C02\u7528\u306EAI\u30A2\u30B7\u30B9\u30BF\u30F3\u30C8\u30DC\u30C3\u30C8\u3078\u3088\u3046\u3053\u305D\uFF01\",\r\n    unauthorized: \"\uD83D\uDEAB \u7533\u3057\u8A33\u3042\u308A\u307E\u305B\u3093\u3002\u307E\u3060\u3053\u306E\u30DC\u30C3\u30C8\u306B\u30A2\u30AF\u30BB\u30B9\u3059\u308B\u6A29\u9650\u304C\u306A\u3044\u3088\u3046\u3067\u3059\u3002\",\r\n    error: \"\uD83D\uDE05 \u304A\u3063\u3068\uFF01\u4F55\u304B\u554F\u984C\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002\u3082\u3046\u4E00\u5EA6\u8A66\u3057\u3066\u307F\u307E\u305B\u3093\u304B\uFF1F\",\r\n    current_language: \"\uD83C\uDF0D \u73FE\u5728\u306E\u8A00\u8A9E\u8A2D\u5B9A\u306F\u65E5\u672C\u8A9E\u3067\u3059\",\r\n    language_changed: \"\uD83C\uDF89 \u7D20\u6674\u3089\u3057\u3044\uFF01\u8A00\u8A9E\u304C\u6B21\u306E\u3088\u3046\u306B\u8A2D\u5B9A\u3055\u308C\u307E\u3057\u305F\uFF1A\",\r\n    new_conversation: \"\uD83C\uDD95 \u4E86\u89E3\u3057\u307E\u3057\u305F\u3002\u65B0\u3057\u3044\u4F1A\u8A71\u3092\u59CB\u3081\u307E\u3057\u3087\u3046\uFF01\u4EE5\u524D\u306E\u30C1\u30E3\u30C3\u30C8\u5C65\u6B74\u306F\u30AF\u30EA\u30A2\u3055\u308C\u307E\u3057\u305F\u3002\",\r\n    no_history: \"\uD83E\uDD14 \u3046\u30FC\u3093...\u307E\u3060\u4F1A\u8A71\u3092\u3057\u3066\u3044\u306A\u3044\u3088\u3046\u3067\u3059\u306D\u3002\",\r\n    history_summary: \"\uD83D\uDCDC \u3053\u308C\u307E\u3067\u306E\u4F1A\u8A71\u306E\u8981\u7D04\u3067\u3059\uFF1A\",\r\n    current_model: \"\uD83E\uDD16 \u73FE\u5728\u4F7F\u7528\u4E2D\u306EAI\u30E2\u30C7\u30EB\u306F\uFF1A\",\r\n    available_models: \"\uD83D\uDD22 \u5229\u7528\u53EF\u80FD\u306A\u30E2\u30C7\u30EB\u306E\u4E00\u89A7\u3067\u3059\uFF1A\",\r\n    model_changed: \"\uD83D\uDD04 \u30E2\u30C7\u30EB\u306E\u5207\u308A\u66FF\u3048\u306B\u6210\u529F\u3057\u307E\u3057\u305F\uFF01\u73FE\u5728\u4F7F\u7528\u4E2D\u306E\u30E2\u30C7\u30EB\u306F\uFF1A\",\r\n    help_intro: \"\uD83E\uDDED \u79C1\u306B\u3067\u304D\u308B\u3053\u3068\u306F\u4EE5\u4E0B\u306E\u901A\u308A\u3067\u3059\uFF1A\",\r\n    start_description: \"\uD83D\uDE80 \u6328\u62F6\u3092\u3057\u3066\u4F1A\u8A71\u3092\u59CB\u3081\u308B\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F \u8A00\u8A9E\u3092\u5207\u308A\u66FF\u3048\u305F\u3044\u5834\u5408\u306F\u3053\u3061\u3089\",\r\n    new_description: \"\uD83D\uDD04 \u65B0\u3057\u3044\u4F1A\u8A71\u3092\u59CB\u3081\u308B\",\r\n    history_description: \"\uD83D\uDCDA \u3053\u308C\u307E\u3067\u306E\u4F1A\u8A71\u3092\u632F\u308A\u8FD4\u308B\",\r\n    switchmodel_description: \"\uD83D\uDD00 \u5225\u306EAI\u30E2\u30C7\u30EB\u3092\u8A66\u3059\",\r\n    help_description: \"\u2753 \u5229\u7528\u53EF\u80FD\u306A\u3059\u3079\u3066\u306E\u30B3\u30DE\u30F3\u30C9\u3092\u898B\u308B\",\r\n    choose_language: \"\uD83C\uDF10 \u3069\u306E\u8A00\u8A9E\u3067\u4F1A\u8A71\u3057\u307E\u3059\u304B\uFF1F\",\r\n    choose_model: \"\uD83E\uDD16 \u4F1A\u8A71\u306B\u4F7F\u7528\u3059\u308BAI\u30E2\u30C7\u30EB\u3092\u9078\u3093\u3067\u304F\u3060\u3055\u3044\uFF1A\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 \u82F1\u8A9E\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 \u4E2D\u56FD\u8A9E\uFF08\u7C21\u4F53\u5B57\uFF09\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 \u30B9\u30DA\u30A4\u30F3\u8A9E\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC \u4E2D\u56FD\u8A9E\uFF08\u7E41\u4F53\u5B57\uFF09\",\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 \u65E5\u672C\u8A9E\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA \u30C9\u30A4\u30C4\u8A9E\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 \u30D5\u30E9\u30F3\u30B9\u8A9E\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA \u30ED\u30B7\u30A2\u8A9E\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F \u753B\u50CF\u3092\u4F5C\u6210\u3059\u308B\u306B\u306F\u3001\u4F55\u3092\u898B\u305F\u3044\u304B\u6559\u3048\u3066\u304F\u3060\u3055\u3044\uFF01\",\r\n    image_generation_error: \"\uD83D\uDE1E \u7533\u3057\u8A33\u3042\u308A\u307E\u305B\u3093\u3002\u753B\u50CF\u306E\u4F5C\u6210\u4E2D\u306B\u554F\u984C\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002\u3082\u3046\u4E00\u5EA6\u8A66\u3057\u3066\u307F\u307E\u305B\u3093\u304B\uFF1F\",\r\n    img_description: \"\uD83C\uDFA8 DALL\u00B7E\u3092\u4F7F\u7528\u3057\u3066\u7D20\u6674\u3089\u3057\u3044\u753B\u50CF\u3092\u4F5C\u6210\",\r\n    invalid_size: \"\uD83D\uDCCF \u7533\u3057\u8A33\u3042\u308A\u307E\u305B\u3093\u3002\u305D\u306E\u30B5\u30A4\u30BA\u306F\u4F7F\u7528\u3067\u304D\u307E\u305B\u3093\u3002\u6B21\u306E\u3044\u305A\u308C\u304B\u3092\u8A66\u3057\u3066\u307F\u3066\u304F\u3060\u3055\u3044\uFF1A\",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F Flux\u3092\u4F7F\u7528\u3057\u3066\u7F8E\u3057\u3044\u753B\u50CF\u3092\u4F5C\u6210\",\r\n    flux_usage: \"\uD83D\uDCDD \u4F7F\u7528\u65B9\u6CD5\uFF1A/flux <\u8AAC\u660E> [\u30A2\u30B9\u30DA\u30AF\u30C8\u6BD4]\u3002\u6B21\u306E\u6BD4\u7387\u304B\u3089\u9078\u629E\u3067\u304D\u307E\u3059\uFF1A1:1\uFF08\u30C7\u30D5\u30A9\u30EB\u30C8\uFF09\u30011:2\u30013:2\u30013:4\u300116:9\u30019:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 \u305D\u306E\u30A2\u30B9\u30DA\u30AF\u30C8\u6BD4\u306F\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3002\u6B21\u306E\u4E2D\u304B\u3089\u9078\u3093\u3067\u304F\u3060\u3055\u3044\uFF1A\",\r\n    original_prompt: \"\uD83C\uDFA8 \u5143\u306E\u8AAC\u660E\",\r\n    prompt_generation_model: \"\uD83D\uDCAC \u30D7\u30ED\u30F3\u30D7\u30C8\u751F\u6210\u30E2\u30C7\u30EB\",\r\n    optimized_prompt: \"\uD83C\uDF10 \u6700\u9069\u5316\u3055\u308C\u305F\u8AAC\u660E\",\r\n    image_specs: \"\uD83D\uDCD0 \u753B\u50CF\u306E\u8A73\u7D30\",\r\n    command_not_found: \"\u2753 \u3059\u307F\u307E\u305B\u3093\u3001\u305D\u306E\u30B3\u30DE\u30F3\u30C9\u306F\u5206\u304B\u308A\u307E\u305B\u3093\u3002/help \u3068\u5165\u529B\u3057\u3066\u3001\u79C1\u306B\u3067\u304D\u308B\u3053\u3068\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\uFF01\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB \u73FE\u5728\u306E\u30E2\u30C7\u30EB\u306F\u753B\u50CF\u5206\u6790\u3092\u30B5\u30DD\u30FC\u30C8\u3057\u3066\u3044\u307E\u305B\u3093\u3002\u30DE\u30EB\u30C1\u30E2\u30FC\u30C0\u30EB\u5165\u529B\u3092\u30B5\u30DD\u30FC\u30C8\u3059\u308B\u30E2\u30C7\u30EB\u306B\u5207\u308A\u66FF\u3048\u3066\u304F\u3060\u3055\u3044\u3002\",\r\n    image_analysis_error: \"\u274C \u304A\u3063\u3068\uFF01\u753B\u50CF\u5206\u6790\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002\u5F8C\u3067\u3082\u3046\u4E00\u5EA6\u304A\u8A66\u3057\u304F\u3060\u3055\u3044\u3002\",\r\n    image_analysis_description: \"\uD83D\uDCF8 \u753B\u50CF\u5206\u6790\uFF1A\u300C\u3053\u306E\u753B\u50CF\u3092\u5206\u6790\u3057\u3066\u304F\u3060\u3055\u3044\u300D\u306A\u3069\u306E\u30AD\u30E3\u30D7\u30B7\u30E7\u30F3\u3092\u4ED8\u3051\u3066\u5199\u771F\u3092\u9001\u4FE1\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u30DC\u30C3\u30C8\u306F\u73FE\u5728\u9078\u629E\u3055\u308C\u3066\u3044\u308BAI\u30E2\u30C7\u30EB\uFF08OpenAI\u307E\u305F\u306FGoogle Gemini\uFF09\u3092\u4F7F\u7528\u3057\u3066\u5206\u6790\u3057\u3001\u7D50\u679C\u3092\u8FD4\u4FE1\u3057\u307E\u3059\u3002\",\r\n  },\r\n  de: {\r\n    welcome: \"\uD83D\uDC4B Hallo! Willkommen bei deinem pers\u00F6nlichen KI-Assistenten-Bot!\",\r\n    unauthorized: \"\uD83D\uDEAB Ups! Es scheint, dass du noch keinen Zugang zu diesem Bot hast.\",\r\n    error: \"\uD83D\uDE05 Hoppla! Etwas ist schiefgelaufen. M\u00F6chtest du es noch einmal versuchen?\",\r\n    current_language: \"\uD83C\uDF0D Du chattest gerade auf Deutsch\",\r\n    language_changed: \"\uD83C\uDF89 Gro\u00DFartig! Deine Sprache ist jetzt eingestellt auf: \",\r\n    new_conversation: \"\uD83C\uDD95 Alles klar, lass uns von vorne anfangen! Ich habe unseren vorherigen Chat gel\u00F6scht.\",\r\n    no_history: \"\uD83E\uDD14 Hmm... Es sieht so aus, als h\u00E4tten wir noch nicht gechattet.\",\r\n    history_summary: \"\uD83D\uDCDC Hier ist eine kurze Zusammenfassung unserer vorherigen Chats:\",\r\n    current_model: \"\uD83E\uDD16 Du verwendest gerade dieses KI-Modell: \",\r\n    available_models: \"\uD83D\uDD22 Schau dir all diese coolen Modelle an, die wir haben: \",\r\n    model_changed: \"\uD83D\uDD04 Modellwechsel erfolgreich! Wir verwenden jetzt: \",\r\n    help_intro: \"\uD83E\uDDED Hier ist, was ich f\u00FCr dich tun kann:\",\r\n    start_description: \"\uD83D\uDE80 Sag Hallo und lass uns anfangen zu chatten\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F M\u00F6chtest du die Sprache wechseln? Benutze dies\",\r\n    new_description: \"\uD83D\uDD04 Starte eine komplett neue Unterhaltung\",\r\n    history_description: \"\uD83D\uDCDA Sieh dir an, wor\u00FCber wir gesprochen haben\",\r\n    switchmodel_description: \"\uD83D\uDD00 Probiere ein anderes KI-Modell aus\",\r\n    help_description: \"\u2753 Siehe alle verf\u00FCgbaren Befehle\",\r\n    choose_language: \"\uD83C\uDF10 In welcher Sprache m\u00F6chtest du chatten?\",\r\n    choose_model: \"\uD83E\uDD16 W\u00E4hle ein KI-Modell zum Chatten aus:\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 Englisch\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 Chinesisch (Vereinfacht)\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 Spanisch\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC Chinesisch (Traditionell)\",\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 Japanisch\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA Deutsch\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 Franz\u00F6sisch\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA Russisch\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F Um ein Bild zu erstellen, sag mir, was du sehen m\u00F6chtest!\",\r\n    image_generation_error: \"\uD83D\uDE1E Oh je, bei der Erstellung des Bildes gab es ein Problem. M\u00F6chtest du es noch einmal versuchen?\",\r\n    img_description: \"\uD83C\uDFA8 Erstelle erstaunliche Bilder mit DALL\u00B7E\",\r\n    invalid_size: \"\uD83D\uDCCF Ups, diese Gr\u00F6\u00DFe funktioniert nicht. Wie w\u00E4re es mit einer von diesen: \",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F Erstelle wundersch\u00F6ne Bilder mit Flux\",\r\n    flux_usage: \"\uD83D\uDCDD So wird es verwendet: /flux <Beschreibung> [Seitenverh\u00E4ltnis]. Du kannst aus diesen Verh\u00E4ltnissen w\u00E4hlen: 1:1 (Standard), 1:2, 3:2, 3:4, 16:9, 9:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 Dieses Seitenverh\u00E4ltnis stimmt nicht ganz. Du kannst aus diesen w\u00E4hlen: \",\r\n    original_prompt: \"\uD83C\uDFA8 Originalbeschreibung\",\r\n    prompt_generation_model: \"\uD83D\uDCAC Prompt-Generierungsmodell\",\r\n    optimized_prompt: \"\uD83C\uDF10 Verbesserte Beschreibung\",\r\n    image_specs: \"\uD83D\uDCD0 Bilddetails\",\r\n    command_not_found: \"\u2753 Hmm, ich kenne diesen Befehl nicht. Gib /help ein, um zu sehen, was ich kann!\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB Das aktuelle Modell unterst\u00FCtzt keine Bildanalyse. Bitte wechseln Sie zu einem Modell, das multimodale Eingaben unterst\u00FCtzt.\",\r\n    image_analysis_error: \"\u274C Hoppla! Bei der Bildanalyse ist ein Fehler aufgetreten. Bitte versuchen Sie es sp\u00E4ter erneut.\",\r\n    image_analysis_description: \"\uD83D\uDCF8 Bildanalyse: Senden Sie ein Foto mit einer Beschreibung wie 'Bitte analysiere dieses Bild'. Der Bot verwendet das aktuelle KI-Modell (OpenAI oder Google Gemini), um es zu analysieren und antwortet mit den Ergebnissen.\",\r\n  },\r\n  fr: {\r\n    welcome: \"\uD83D\uDC4B Salut ! Bienvenue sur votre assistant IA personnel !\",\r\n    unauthorized: \"\uD83D\uDEAB Oups ! Il semble que vous n'ayez pas encore acc\u00E8s \u00E0 ce bot.\",\r\n    error: \"\uD83D\uDE05 Oups ! Quelque chose s'est mal pass\u00E9. Voulez-vous r\u00E9essayer ?\",\r\n    current_language: \"\uD83C\uDF0D Vous chattez actuellement en fran\u00E7ais\",\r\n    language_changed: \"\uD83C\uDF89 G\u00E9nial ! Votre langue est maintenant d\u00E9finie sur : \",\r\n    new_conversation: \"\uD83C\uDD95 D'accord, commen\u00E7ons une nouvelle conversation ! J'ai effac\u00E9 notre chat pr\u00E9c\u00E9dent.\",\r\n    no_history: \"\uD83E\uDD14 Hmm... On dirait qu'on n'a pas encore discut\u00E9.\",\r\n    history_summary: \"\uD83D\uDCDC Voici un r\u00E9sum\u00E9 rapide de nos conversations pr\u00E9c\u00E9dentes :\",\r\n    current_model: \"\uD83E\uDD16 Vous utilisez actuellement ce mod\u00E8le d'IA : \",\r\n    available_models: \"\uD83D\uDD22 Jetez un \u0153il \u00E0 tous ces mod\u00E8les cool que nous avons : \",\r\n    model_changed: \"\uD83D\uDD04 Changement de mod\u00E8le r\u00E9ussi ! Nous utilisons maintenant : \",\r\n    help_intro: \"\uD83E\uDDED Voici ce que je peux faire pour vous :\",\r\n    start_description: \"\uD83D\uDE80 Dites bonjour et commen\u00E7ons \u00E0 discuter\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F Vous voulez changer de langue ? Utilisez ceci\",\r\n    new_description: \"\uD83D\uDD04 Commencer une toute nouvelle conversation\",\r\n    history_description: \"\uD83D\uDCDA Jetez un \u0153il \u00E0 ce dont nous avons discut\u00E9\",\r\n    switchmodel_description: \"\uD83D\uDD00 Essayez un mod\u00E8le d'IA diff\u00E9rent\",\r\n    help_description: \"\u2753 Voir toutes les commandes disponibles\",\r\n    choose_language: \"\uD83C\uDF10 Dans quelle langue voulez-vous discuter ?\",\r\n    choose_model: \"\uD83E\uDD16 Choisissez un mod\u00E8le d'IA pour discuter :\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 Anglais\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 Chinois (Simplifi\u00E9)\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 Espagnol\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC Chinois (Traditionnel)\",\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 Japonais\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA Allemand\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 Fran\u00E7ais\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA Russe\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F Pour cr\u00E9er une image, dites-moi ce que vous aimeriez voir !\",\r\n    image_generation_error: \"\uD83D\uDE1E Oh non, il y a eu un probl\u00E8me lors de la cr\u00E9ation de l'image. Voulez-vous r\u00E9essayer ?\",\r\n    img_description: \"\uD83C\uDFA8 Cr\u00E9ez des images incroyables avec DALL\u00B7E\",\r\n    invalid_size: \"\uD83D\uDCCF Oups, cette taille ne fonctionne pas. Que diriez-vous d'essayer l'une de celles-ci : \",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F Cr\u00E9ez de belles images en utilisant Flux\",\r\n    flux_usage: \"\uD83D\uDCDD Voici comment l'utiliser : /flux <description> [ratio d'aspect]. Vous pouvez choisir parmi ces ratios : 1:1 (par d\u00E9faut), 1:2, 3:2, 3:4, 16:9, 9:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 Ce ratio d'aspect n'est pas tout \u00E0 fait correct. Vous pouvez choisir parmi ceux-ci : \",\r\n    original_prompt: \"\uD83C\uDFA8 Description originale\",\r\n    prompt_generation_model: \"\uD83D\uDCAC Mod\u00E8le de g\u00E9n\u00E9ration de prompt\",\r\n    optimized_prompt: \"\uD83C\uDF10 Description am\u00E9lior\u00E9e\",\r\n    image_specs: \"\uD83D\uDCD0 D\u00E9tails de l'image\",\r\n    command_not_found: \"\u2753 Hmm, je ne connais pas cette commande. Tapez /help pour voir ce que je peux faire !\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB Le mod\u00E8le actuel ne prend pas en charge l'analyse d'images. Veuillez passer \u00E0 un mod\u00E8le qui prend en charge les entr\u00E9es multimodales.\",\r\n    image_analysis_error: \"\u274C Oups ! Une erreur s'est produite lors de l'analyse de l'image. Veuillez r\u00E9essayer plus tard.\",\r\n    image_analysis_description: \"\uD83D\uDCF8 Analyse d'images : Envoyez une photo avec une l\u00E9gende comme 'Veuillez analyser cette image'. Le bot utilisera le mod\u00E8le d'IA actuel (OpenAI ou Google Gemini) pour l'analyser et r\u00E9pondra avec les r\u00E9sultats.\",\r\n  },\r\n  ru: {\r\n    welcome: \"\uD83D\uDC4B \u041F\u0440\u0438\u0432\u0435\u0442! \u0414\u043E\u0431\u0440\u043E \u043F\u043E\u0436\u0430\u043B\u043E\u0432\u0430\u0442\u044C \u0432 \u0432\u0430\u0448\u0435\u0433\u043E \u043F\u0435\u0440\u0441\u043E\u043D\u0430\u043B\u044C\u043D\u043E\u0433\u043E \u0418\u0418-\u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043D\u0442\u0430!\",\r\n    unauthorized: \"\uD83D\uDEAB \u0423\u043F\u0441! \u041F\u043E\u0445\u043E\u0436\u0435, \u0443 \u0432\u0430\u0441 \u0435\u0449\u0435 \u043D\u0435\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u043A \u044D\u0442\u043E\u043C\u0443 \u0431\u043E\u0442\u0443.\",\r\n    error: \"\uD83D\uDE05 \u041E\u0439! \u0427\u0442\u043E-\u0442\u043E \u043F\u043E\u0448\u043B\u043E \u043D\u0435 \u0442\u0430\u043A. \u0425\u043E\u0442\u0438\u0442\u0435 \u043F\u043E\u043F\u0440\u043E\u0431\u043E\u0432\u0430\u0442\u044C \u0435\u0449\u0435 \u0440\u0430\u0437?\",\r\n    current_language: \"\uD83C\uDF0D \u0421\u0435\u0439\u0447\u0430\u0441 \u0432\u044B \u043E\u0431\u0449\u0430\u0435\u0442\u0435\u0441\u044C \u043D\u0430 \u0440\u0443\u0441\u0441\u043A\u043E\u043C \u044F\u0437\u044B\u043A\u0435\",\r\n    language_changed: \"\uD83C\uDF89 \u041E\u0442\u043B\u0438\u0447\u043D\u043E! \u0412\u0430\u0448 \u044F\u0437\u044B\u043A \u0442\u0435\u043F\u0435\u0440\u044C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D \u043D\u0430: \",\r\n    new_conversation: \"\uD83C\uDD95 \u0425\u043E\u0440\u043E\u0448\u043E, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043D\u0430\u0447\u043D\u0435\u043C \u0441\u043D\u0430\u0447\u0430\u043B\u0430! \u042F \u043E\u0447\u0438\u0441\u0442\u0438\u043B \u043D\u0430\u0448 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u0447\u0430\u0442.\",\r\n    no_history: \"\uD83E\uDD14 \u0425\u043C\u043C... \u041F\u043E\u0445\u043E\u0436\u0435, \u043C\u044B \u0435\u0449\u0435 \u043D\u0435 \u043E\u0431\u0449\u0430\u043B\u0438\u0441\u044C.\",\r\n    history_summary: \"\uD83D\uDCDC \u0412\u043E\u0442 \u043A\u0440\u0430\u0442\u043A\u043E\u0435 \u0440\u0435\u0437\u044E\u043C\u0435 \u043D\u0430\u0448\u0438\u0445 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0445 \u0440\u0430\u0437\u0433\u043E\u0432\u043E\u0440\u043E\u0432:\",\r\n    current_model: \"\uD83E\uDD16 \u0421\u0435\u0439\u0447\u0430\u0441 \u0432\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0435 \u044D\u0442\u0443 \u043C\u043E\u0434\u0435\u043B\u044C \u0418\u0418: \",\r\n    available_models: \"\uD83D\uDD22 \u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0438\u0442\u0435 \u043D\u0430 \u0432\u0441\u0435 \u044D\u0442\u0438 \u043A\u043B\u0430\u0441\u0441\u043D\u044B\u0435 \u043C\u043E\u0434\u0435\u043B\u0438, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u0443 \u043D\u0430\u0441 \u0435\u0441\u0442\u044C: \",\r\n    model_changed: \"\uD83D\uDD04 \u041C\u043E\u0434\u0435\u043B\u044C \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0430! \u0422\u0435\u043F\u0435\u0440\u044C \u043C\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C: \",\r\n    help_intro: \"\uD83E\uDDED \u0412\u043E\u0442 \u0447\u0442\u043E \u044F \u043C\u043E\u0433\u0443 \u0434\u043B\u044F \u0432\u0430\u0441 \u0441\u0434\u0435\u043B\u0430\u0442\u044C:\",\r\n    start_description: \"\uD83D\uDE80 \u041F\u043E\u0437\u0434\u043E\u0440\u043E\u0432\u0430\u0439\u0442\u0435\u0441\u044C, \u0438 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043D\u0430\u0447\u043D\u0435\u043C \u043E\u0431\u0449\u0430\u0442\u044C\u0441\u044F\",\r\n    language_description: \"\uD83D\uDDE3\uFE0F \u0425\u043E\u0442\u0438\u0442\u0435 \u0441\u043C\u0435\u043D\u0438\u0442\u044C \u044F\u0437\u044B\u043A? \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u044D\u0442\u043E\",\r\n    new_description: \"\uD83D\uDD04 \u041D\u0430\u0447\u0430\u0442\u044C \u0441\u043E\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E \u043D\u043E\u0432\u044B\u0439 \u0440\u0430\u0437\u0433\u043E\u0432\u043E\u0440\",\r\n    history_description: \"\uD83D\uDCDA \u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C, \u043E \u0447\u0435\u043C \u043C\u044B \u0433\u043E\u0432\u043E\u0440\u0438\u043B\u0438\",\r\n    switchmodel_description: \"\uD83D\uDD00 \u041F\u043E\u043F\u0440\u043E\u0431\u043E\u0432\u0430\u0442\u044C \u0434\u0440\u0443\u0433\u0443\u044E \u043C\u043E\u0434\u0435\u043B\u044C \u0418\u0418\",\r\n    help_description: \"\u2753 \u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0435 \u043A\u043E\u043C\u0430\u043D\u0434\u044B\",\r\n    choose_language: \"\uD83C\uDF10 \u041D\u0430 \u043A\u0430\u043A\u043E\u043C \u044F\u0437\u044B\u043A\u0435 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u043E\u0431\u0449\u0430\u0442\u044C\u0441\u044F?\",\r\n    choose_model: \"\uD83E\uDD16 \u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043C\u043E\u0434\u0435\u043B\u044C \u0418\u0418 \u0434\u043B\u044F \u043E\u0431\u0449\u0435\u043D\u0438\u044F:\",\r\n    language_en: \"\uD83C\uDDEC\uD83C\uDDE7 \u0410\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439\",\r\n    language_zh: \"\uD83C\uDDE8\uD83C\uDDF3 \u041A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u0439 (\u0443\u043F\u0440\u043E\u0449\u0435\u043D\u043D\u044B\u0439)\",\r\n    language_es: \"\uD83C\uDDEA\uD83C\uDDF8 \u0418\u0441\u043F\u0430\u043D\u0441\u043A\u0438\u0439\",\r\n    'language_zh-TW': \"\uD83C\uDDF9\uD83C\uDDFC \u041A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u0439 (\u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043E\u043D\u043D\u044B\u0439)\",\r\n    language_ja: \"\uD83C\uDDEF\uD83C\uDDF5 \u042F\u043F\u043E\u043D\u0441\u043A\u0438\u0439\",\r\n    language_de: \"\uD83C\uDDE9\uD83C\uDDEA \u041D\u0435\u043C\u0435\u0446\u043A\u0438\u0439\",\r\n    language_fr: \"\uD83C\uDDEB\uD83C\uDDF7 \u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0439\",\r\n    language_ru: \"\uD83C\uDDF7\uD83C\uDDFA \u0420\u0443\u0441\u0441\u043A\u0438\u0439\",\r\n    image_prompt_required: \"\uD83D\uDDBC\uFE0F \u0427\u0442\u043E\u0431\u044B \u0441\u043E\u0437\u0434\u0430\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435, \u0441\u043A\u0430\u0436\u0438\u0442\u0435 \u043C\u043D\u0435, \u0447\u0442\u043E \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044C!\",\r\n    image_generation_error: \"\uD83D\uDE1E \u041E\u0439, \u043F\u0440\u0438 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0438 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0432\u043E\u0437\u043D\u0438\u043A\u043B\u0430 \u043F\u0440\u043E\u0431\u043B\u0435\u043C\u0430. \u041D\u0435 \u0445\u043E\u0442\u0438\u0442\u0435 \u043F\u043E\u043F\u0440\u043E\u0431\u043E\u0432\u0430\u0442\u044C \u0435\u0449\u0435 \u0440\u0430\u0437?\",\r\n    img_description: \"\uD83C\uDFA8 \u0421\u043E\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0434\u0438\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\u044E DALL\u00B7E\",\r\n    invalid_size: \"\uD83D\uDCCF \u0423\u043F\u0441, \u044D\u0442\u043E\u0442 \u0440\u0430\u0437\u043C\u0435\u0440 \u043D\u0435 \u043F\u043E\u0434\u0445\u043E\u0434\u0438\u0442. \u041A\u0430\u043A \u043D\u0430\u0441\u0447\u0435\u0442 \u0442\u043E\u0433\u043E, \u0447\u0442\u043E\u0431\u044B \u043F\u043E\u043F\u0440\u043E\u0431\u043E\u0432\u0430\u0442\u044C \u043E\u0434\u0438\u043D \u0438\u0437 \u044D\u0442\u0438\u0445: \",\r\n    flux_description: \"\uD83D\uDDBC\uFE0F \u0421\u043E\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043A\u0440\u0430\u0441\u0438\u0432\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\u044E Flux\",\r\n    flux_usage: \"\uD83D\uDCDD \u0412\u043E\u0442 \u043A\u0430\u043A \u044D\u0442\u043E \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C: /flux <\u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435> [\u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D]. \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0432\u044B\u0431\u0440\u0430\u0442\u044C \u0438\u0437 \u044D\u0442\u0438\u0445 \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0439: 1:1 (\u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E), 1:2, 3:2, 3:4, 16:9, 9:16\",\r\n    invalid_aspect_ratio: \"\uD83D\uDD22 \u042D\u0442\u043E \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D \u043D\u0435 \u0441\u043E\u0432\u0441\u0435\u043C \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E\u0435. \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0432\u044B\u0431\u0440\u0430\u0442\u044C \u0438\u0437 \u044D\u0442\u0438\u0445: \",\r\n    original_prompt: \"\uD83C\uDFA8 \u0418\u0441\u0445\u043E\u0434\u043D\u043E\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\",\r\n    prompt_generation_model: \"\uD83D\uDCAC \u041C\u043E\u0434\u0435\u043B\u044C \u0433\u0435\u043D\u0435\u0440\u0430\u0446\u0438\u0438 \u043F\u043E\u0434\u0441\u043A\u0430\u0437\u043E\u043A\",\r\n    optimized_prompt: \"\uD83C\uDF10 \u0423\u043B\u0443\u0447\u0448\u0435\u043D\u043D\u043E\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\",\r\n    image_specs: \"\uD83D\uDCD0 \u0414\u0435\u0442\u0430\u043B\u0438 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\",\r\n    command_not_found: \"\u2753 \u0425\u043C\u043C, \u044F \u043D\u0435 \u0437\u043D\u0430\u044E \u044D\u0442\u0443 \u043A\u043E\u043C\u0430\u043D\u0434\u0443. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 /help, \u0447\u0442\u043E\u0431\u044B \u0443\u0432\u0438\u0434\u0435\u0442\u044C, \u0447\u0442\u043E \u044F \u043C\u043E\u0433\u0443 \u0441\u0434\u0435\u043B\u0430\u0442\u044C!\",\r\n    image_analysis_not_supported: \"\uD83D\uDEAB \u0422\u0435\u043A\u0443\u0449\u0430\u044F \u043C\u043E\u0434\u0435\u043B\u044C \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u043D\u0430\u043B\u0438\u0437 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0439. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u0435\u0441\u044C \u043D\u0430 \u043C\u043E\u0434\u0435\u043B\u044C, \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044E\u0449\u0443\u044E \u043C\u0443\u043B\u044C\u0442\u0438\u043C\u043E\u0434\u0430\u043B\u044C\u043D\u044B\u0439 \u0432\u0432\u043E\u0434.\",\r\n    image_analysis_error: \"\u274C \u041E\u0439! \u041F\u0440\u043E\u0438\u0437\u043E\u0448\u043B\u0430 \u043E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0430\u043D\u0430\u043B\u0438\u0437\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u043F\u043E\u0437\u0436\u0435.\",\r\n    image_analysis_description: \"\uD83D\uDCF8 \u0410\u043D\u0430\u043B\u0438\u0437 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0439: \u041E\u0442\u043F\u0440\u0430\u0432\u044C\u0442\u0435 \u0444\u043E\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u044E \u0441 \u043F\u043E\u0434\u043F\u0438\u0441\u044C\u044E, \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, '\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u0440\u043E\u0430\u043D\u0430\u043B\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u044D\u0442\u043E \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435'. \u0411\u043E\u0442 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442 \u0442\u0435\u043A\u0443\u0449\u0443\u044E \u043C\u043E\u0434\u0435\u043B\u044C \u0418\u0418 (OpenAI \u0438\u043B\u0438 Google Gemini) \u0434\u043B\u044F \u0430\u043D\u0430\u043B\u0438\u0437\u0430 \u0438 \u043E\u0442\u0432\u0435\u0442\u0438\u0442 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043C\u0438.\",\r\n  },\r\n};\r\n\r\nexport function translate(key: TranslationKey, language: SupportedLanguages = 'en'): string {\r\n  return translations[language]?.[key] || translations['en'][key];\r\n}", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\nimport { Message } from './openai_api';\n\ninterface ImageGenerationResponse {\n  data: Array<{ url: string }>;\n}\n\nexport class ImageGenerationAPI implements ModelAPIInterface {\n  private apiKey: string;\n  private baseUrl: string;\n  private model: string;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiKey = config.openaiApiKey;\n    this.baseUrl = config.openaiBaseUrl;\n    this.model = config.dallEModel;\n  }\n\n  async generateImage(prompt: string, size: string): Promise<string> {\n    const url = `${this.baseUrl}/images/generations`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: this.model,\n        prompt: prompt,\n        n: 1,\n        size: size,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Image generation API error: ${response.statusText}`);\n    }\n\n    const data: ImageGenerationResponse = await response.json();\n    return data.data[0].url;\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    throw new Error('Method not implemented for image generation.');\n  }\n\n  isValidModel(model: string): boolean {\n    return model === this.model;\n  }\n\n  getDefaultModel(): string {\n    return this.model;\n  }\n\n  getAvailableModels(): string[] {\n    return [this.model];\n  }\n\n  getValidSizes(): string[] {\n    return ['1024x1024', '1024x1792', '1792x1024'];\n  }\n}\n\nexport default ImageGenerationAPI;", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\n\ninterface FluxResponse {\n  result: {\n    image: string; // base64 encoded image data\n  };\n  success: boolean;\n  errors: string[];\n}\n\ninterface ExternalAPIResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nexport class FluxAPI implements ModelAPIInterface {\n  private apiToken: string;\n  private accountId: string;\n  private steps: number;\n  private model: string = '@cf/black-forest-labs/flux-1-schnell';\n  private promptOptimization: boolean;\n  private externalApiBase?: string;\n  private externalModel?: string;\n  private externalApiKey?: string;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiToken = config.cloudflareApiToken;\n    this.accountId = config.cloudflareAccountId;\n    this.steps = config.fluxSteps;\n    this.promptOptimization = config.promptOptimization;\n    this.externalApiBase = config.externalApiBase;\n    this.externalModel = config.externalModel;\n    this.externalApiKey = config.externalApiKey;\n  }\n\n  async generateImage(prompt: string, aspectRatio: string): Promise<{ imageData: Uint8Array; optimizedPrompt?: string }> {\n    let optimizedPrompt: string | undefined;\n    if (this.promptOptimization) {\n      optimizedPrompt = await this.optimizePrompt(prompt, aspectRatio);\n      prompt = optimizedPrompt;\n    }\n\n    const url = `https://api.cloudflare.com/client/v4/accounts/${this.accountId}/ai/run/${this.model}`;\n    const [width, height] = this.getImageDimensions(aspectRatio);\n    const seed = Math.floor(Math.random() * 1000000);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiToken}`,\n      },\n      body: JSON.stringify({\n        prompt: prompt,\n        num_steps: this.steps,\n        seed: seed,\n        width: width,\n        height: height,\n      }),\n    });\n\n    const responseText = await response.text();\n    let data: FluxResponse;\n    try {\n      data = JSON.parse(responseText);\n    } catch (error) {\n      console.error('Error parsing Flux API response:', error);\n      throw new Error('Invalid response from Flux API');\n    }\n\n    if (!response.ok || !data.success) {\n      const errorMessage = data.errors ? data.errors.join(', ') : 'Unknown error';\n      console.error(`Flux API error: ${errorMessage}`);\n      throw new Error(`Flux API error: ${errorMessage}`);\n    }\n\n    if (!data.result || !data.result.image) {\n      throw new Error('Flux API returned no image');\n    }\n    \n    const binaryString = atob(data.result.image);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return { \n      imageData: bytes,\n      optimizedPrompt\n    };\n  }\n\n  private async optimizePrompt(prompt: string, aspectRatio: string): Promise<string> {\n    if (!this.externalApiBase || !this.externalModel || !this.externalApiKey) {\n      throw new Error('External API configuration is missing');\n    }\n\n    const systemPrompt = \"You are a prompt generation bot based on the Flux.1 model. Based on the user's requirements, automatically generate drawing prompts that adhere to the Flux.1 format. While you can refer to the provided templates to learn the structure and patterns of the prompts, you must remain flexible to meet various different needs. The final output should be limited to the prompts only, without any additional explanations or information. You must reply to me entirely in English!\\n\\n### **Prompt Generation Logic**:\\n\\n1. **Requirement Analysis**: Extract key information from the user's description, including:\\n- Characters: Appearance, actions, expressions, etc.\\n- Scene: Environment, lighting, weather, etc.\\n- Style: Art style, emotional atmosphere, color scheme, etc.\\n- **Aspect Ratio**: If the user provides a specific aspect ratio (e.g., \\\"3:2\\\", \\\"16:9\\\"), extract this and integrate it into the final prompt.\\n- Other elements: Specific objects, background, or effects.\\n\\n2. **Prompt Structure Guidelines**:\\n- **Concise, precise, and detailed**: Prompts should describe the core subject simply and clearly, with enough detail to generate an image that matches the request.\\n- **Flexible and varied**: Use the user's description to dynamically create prompts without following rigid templates. Ensure prompts are adapted based on the specific needs of each user, avoiding overly template-based outputs.\\n- **Descriptions following Flux.1 style**: Prompts must follow the requirements of Flux.1, aiming to include descriptions of the art style, visual effects, and emotional atmosphere. Use keywords and description patterns that match the Flux.1 model's generation process. If a specific aspect ratio is mentioned, ensure it is included in the prompt description.\\n\\n3. **Key Points Summary for Flux.1 Prompts**:\\n- **Concise and precise subject description**: Clearly identify the subject or scene of the image.\\n- **Specific description of style and emotional atmosphere**: Ensure the prompt includes information about the art style, lighting, color scheme, and emotional atmosphere of the image.\\n- **Details on dynamics and action**: Prompts may include important details like actions, emotions, or lighting effects in the scene.\";\n\n    const response = await fetch(`${this.externalApiBase}/v1/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.externalApiKey}`,\n      },\n      body: JSON.stringify({\n        model: this.externalModel,\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: `Optimize this image generation prompt for aspect ratio ${aspectRatio}: ${prompt}` },\n        ],\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`External API error: ${response.statusText}`);\n    }\n\n    const data: ExternalAPIResponse = await response.json();\n    return data.choices[0].message.content.trim();\n  }\n\n  private getImageDimensions(aspectRatio: string): [number, number] {\n    switch (aspectRatio) {\n      case '1:1': return [1024, 1024];\n      case '1:2': return [512, 1024];\n      case '3:2': return [768, 512];\n      case '3:4': return [768, 1024];\n      case '16:9': return [1024, 576];\n      case '9:16': return [576, 1024];\n      default: return [1024, 1024]; // Default to 1:1 if invalid ratio is provided\n    }\n  }\n\n  async generateResponse(messages: { role: string; content: string; }[]): Promise<string> {\n    throw new Error('Method not implemented for image generation.');\n  }\n\n  isValidModel(model: string): boolean {\n    return model === this.model;\n  }\n\n  getDefaultModel(): string {\n    return this.model;\n  }\n\n  getAvailableModels(): string[] {\n    return [this.model];\n  }\n\n  getValidAspectRatios(): string[] {\n    return ['1:1', '1:2', '3:2', '3:4', '16:9', '9:16'];\n  }\n}\n\nexport default FluxAPI;", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\nimport { Message } from './openai_api';\n\ninterface OpenAICompatibleResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nexport class OpenAICompatibleAPI implements ModelAPIInterface {\n  private apiKey: string;\n  private baseUrl: string;\n  private models: string[] = [];\n  private defaultModel: string = '';\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiKey = config.openaiCompatibleKey || '';\n    this.baseUrl = config.openaiCompatibleUrl || '';\n    // \u5728\u6784\u9020\u51FD\u6570\u4E2D\u7ACB\u5373\u5F00\u59CB\u83B7\u53D6\u53EF\u7528\u6A21\u578B\n    this.fetchModels().catch(error => console.error('Failed to fetch models:', error));\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    if (!this.apiKey || !this.baseUrl) {\n      throw new Error('OpenAI Compatible API is not configured');\n    }\n\n    if (this.models.length === 0) {\n      await this.fetchModels();\n    }\n\n    const useModel = model || this.defaultModel;\n    if (!useModel) {\n      throw new Error('No model specified and no default model available');\n    }\n\n    const url = `${this.baseUrl}/v1/chat/completions`;\n    console.log(`OpenAI Compatible API request URL: ${url}`);\n\n    const requestBody = {\n      model: useModel,\n      messages: messages,\n    };\n    console.log('OpenAI Compatible API request body:', JSON.stringify(requestBody, null, 2));\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`OpenAI Compatible API error: ${response.statusText}`, errorText);\n      throw new Error(`OpenAI Compatible API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data: OpenAICompatibleResponse = await response.json();\n    console.log('OpenAI Compatible API response:', JSON.stringify(data, null, 2));\n\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No response generated from OpenAI Compatible API');\n    }\n\n    return data.choices[0].message.content.trim();\n  }\n\n  async fetchModels(): Promise<void> {\n    const url = `${this.baseUrl}/v1/models`;\n    console.log(`Fetching models from: ${url}`);\n\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Failed to fetch models: ${response.statusText}`, errorText);\n      throw new Error(`Failed to fetch models: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data: { data: Array<{ id: string }> } = await response.json();\n    console.log('Available models:', JSON.stringify(data, null, 2));\n\n    this.models = data.data.map(model => model.id);\n    this.defaultModel = this.models[0] || '';\n  }\n\n  async getModels(): Promise<string[]> {\n    if (this.models.length === 0) {\n      await this.fetchModels();\n    }\n    return this.models;\n  }\n\n  isValidModel(model: string): boolean {\n    return this.models.includes(model);\n  }\n\n  getDefaultModel(): string {\n    // \u5982\u679C\u8FD8\u6CA1\u6709\u83B7\u53D6\u5230\u6A21\u578B\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u9ED8\u8BA4\u503C\n    return this.defaultModel || 'default_model';\n  }\n\n  getAvailableModels(): string[] {\n    return this.models;\n  }\n\n  async analyzeImage(imageUrl: string, prompt: string, model: string): Promise<string> {\n    if (!this.apiKey || !this.baseUrl) {\n      throw new Error('OpenAI Compatible API is not configured');\n    }\n\n    const url = `${this.baseUrl}/v1/chat/completions`;\n    console.log(`Analyzing image with OpenAI Compatible API. Model: ${model}, URL: ${imageUrl}`);\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: model,\n        messages: [\n          {\n            role: 'user',\n            content: [\n              { type: 'text', text: prompt },\n              { type: 'image_url', image_url: { url: imageUrl } }\n            ]\n          }\n        ],\n        max_tokens: 300\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`OpenAI Compatible API error: ${response.statusText}`, errorText);\n      throw new Error(`OpenAI Compatible image analysis API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data = await response.json() as OpenAICompatibleResponse;\n    console.log('OpenAI Compatible API response:', JSON.stringify(data, null, 2));\n\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No response generated from OpenAI Compatible API');\n    }\n\n    const content = data.choices[0].message?.content;\n    if (!content) {\n      throw new Error('No content in OpenAI Compatible API response');\n    }\n\n    return content.trim();\n  }\n}\n\nexport default OpenAICompatibleAPI;\n", "import { TelegramBot } from '../api/telegram';\nimport { translate, TranslationKey } from '../utils/i18n';\nimport { ImageGenerationAPI } from '../api/image_generation';\nimport { sendChatAction } from '../utils/helpers';\nimport { FluxAPI } from '../api/flux-cf';\nimport { getConfig } from '../env';\nimport OpenAICompatibleAPI from '../api/openai_compatible';\n\nexport interface Command {\n  name: string;\n  description: TranslationKey; // \u4FEE\u6539\u8FD9\u91CC,\u4F7F\u7528 TranslationKey\n  action: (chatId: number, bot: TelegramBot, args: string[]) => Promise<void>;\n}\n\nexport const commands: Command[] = [\n  {\n    name: 'start',\n    description: 'start_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      const language = await bot.getUserLanguage(userId);\n      const currentModel = await bot.getCurrentModel(userId);\n      const welcomeMessage = translate('welcome', language) + '\\n' + \n                           translate('current_model', language) + currentModel;\n      await bot.sendMessageWithFallback(chatId, welcomeMessage);\n    },\n  },\n  {\n    name: 'language',\n    description: 'language_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      const currentLanguage = await bot.getUserLanguage(userId);\n      const keyboard = {\n        inline_keyboard: [\n          [\n            { text: '\uD83C\uDDFA\uD83C\uDDF8 English', callback_data: 'lang_en' },\n            { text: '\uD83C\uDDE8\uD83C\uDDF3 \u7B80\u4F53\u4E2D\u6587', callback_data: 'lang_zh' },\n            { text: '\uD83C\uDDEA\uD83C\uDDF8 Espa\u00F1ol', callback_data: 'lang_es' }\n          ],\n          [\n            { text: '\uD83C\uDDF9\uD83C\uDDFC \u7E41\u9AD4\u4E2D\u6587', callback_data: 'lang_zh-TW' }, // \u4FEE\u6539\u8FD9\u91CC\n            { text: '\uD83C\uDDEF\uD83C\uDDF5 \u65E5\u672C\u8A9E', callback_data: 'lang_ja' },\n            { text: '\uD83C\uDDE9\uD83C\uDDEA Deutsch', callback_data: 'lang_de' }\n          ],\n          [\n            { text: '\uD83C\uDDEB\uD83C\uDDF7 Fran\u00E7ais', callback_data: 'lang_fr' },\n            { text: '\uD83C\uDDF7\uD83C\uDDFA \u0420\u0443\u0441\u0441\u043A\u0438\u0439', callback_data: 'lang_ru' }\n          ]\n        ]\n      };\n      await bot.sendMessage(chatId, translate('choose_language', currentLanguage), { reply_markup: JSON.stringify(keyboard) });\n    },\n  },\n  {\n    name: 'switchmodel',\n    description: 'switchmodel_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      const language = await bot.getUserLanguage(userId);\n      const config = getConfig(bot['env']);\n      try {\n        console.log('Executing switchmodel command');\n        let availableModels = [\n          ...config.openaiModels,\n          ...config.googleModels,\n          ...config.groqModels,\n          ...config.claudeModels,\n          ...config.azureModels,\n        ];\n\n        if (config.openaiCompatibleUrl) {\n          const compatibleApi = new OpenAICompatibleAPI(bot['env']);\n          const compatibleModels = await compatibleApi.getModels();\n          availableModels = [...availableModels, ...compatibleModels];\n        }\n\n        console.log('Available models:', availableModels);\n        const keyboard = {\n          inline_keyboard: availableModels.map(model => [{text: model, callback_data: `model_${model}`}])\n        };\n        console.log('Sending message with model selection keyboard');\n        await bot.sendMessage(chatId, translate('choose_model', language), { reply_markup: JSON.stringify(keyboard) });\n        console.log('Message sent successfully');\n      } catch (error) {\n        console.error('Error in switchmodel command:', error);\n        await bot.sendMessage(chatId, translate('error', language) + ': ' + (error instanceof Error ? error.message : 'Unknown error'));\n      }\n    },\n  },\n  {\n    name: 'new',\n    description: 'new_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      await bot.clearContext(userId);\n    },\n  },\n  {\n    name: 'history',\n    description: 'history_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      const language = await bot.getUserLanguage(userId);\n      const summary = await bot.summarizeHistory(userId);\n      await bot.sendMessage(chatId, summary || translate('no_history', language));\n    },\n  },\n  {\n    name: 'help',\n    description: 'help_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      const language = await bot.getUserLanguage(userId);\n      let helpMessage = translate('help_intro', language) + '\\n\\n';\n      \n      for (const command of commands) {\n        const descriptionKey = `${command.name}_description` as TranslationKey;\n        helpMessage += `/${command.name} - ${translate(descriptionKey, language)}\\n`;\n      }\n      \n      // \u6DFB\u52A0\u56FE\u7247\u5206\u6790\u529F\u80FD\u7684\u8BF4\u660E\n      helpMessage += '\\n' + translate('image_analysis_description', language);\n      \n      await bot.sendMessage(chatId, helpMessage);\n    },\n  },\n  {\n    name: 'img',\n    description: 'img_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      const language = await bot.getUserLanguage(userId);\n  \n      if (!args.length) {\n        await bot.sendMessageWithFallback(chatId, translate('image_prompt_required', language));\n        return;\n      }\n  \n      const validSizes = ['1024x1024', '1024x1792', '1792x1024'];\n      const sizeArg = args[args.length - 1].toLowerCase();\n      let size: string;\n      let prompt: string;\n  \n      if (validSizes.includes(sizeArg)) {\n        size = sizeArg;\n        prompt = args.slice(0, -1).join(' ');\n      } else {\n        size = '1024x1024'; // Default size\n        prompt = args.join(' ');\n        \n        // Check if the last argument looks like a size specification\n        if (sizeArg.includes('x') || sizeArg.includes('*')) {\n          const sizeOptions = validSizes.map(s => `\\`${s}\\``).join(', ');\n          await bot.sendMessage(chatId, translate('invalid_size', language) + sizeOptions);\n          return;\n        }\n      }\n  \n      try {\n        await sendChatAction(chatId, 'upload_photo', bot['env']);\n        const imageApi = new ImageGenerationAPI(bot['env']);\n        const imageUrl = await imageApi.generateImage(prompt, size);\n        await bot.sendPhoto(chatId, imageUrl, { caption: prompt });\n      } catch (error) {\n        console.error('Error generating image:', error);\n        await bot.sendMessage(chatId, translate('image_generation_error', language));\n      }\n    },\n  },\n  {\n    name: 'flux',\n    description: 'flux_description',\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\n      const userId = chatId.toString();\n      const language = await bot.getUserLanguage(userId);\n\n      if (!args.length) {\n        await bot.sendMessage(chatId, translate('flux_usage', language));\n        return;\n      }\n\n      let aspectRatio = '1:1'; // \u9ED8\u8BA4\u6BD4\u4F8B\n      let prompt: string;\n\n      const fluxApi = new FluxAPI(bot['env']);\n      const validRatios = fluxApi.getValidAspectRatios();\n\n      if (validRatios.includes(args[args.length - 1])) {\n        aspectRatio = args[args.length - 1];\n        prompt = args.slice(0, -1).join(' ');\n      } else {\n        prompt = args.join(' ');\n      }\n\n      try {\n        await sendChatAction(chatId, 'upload_photo', bot['env']);\n\n        const { imageData, optimizedPrompt } = await fluxApi.generateImage(prompt, aspectRatio);\n        \n        const config = getConfig(bot['env']);\n        let caption = `${translate('original_prompt', language)}: ${prompt}\\n`;\n        caption += `${translate('image_specs', language)}: ${aspectRatio}\\n`;\n        \n        if (config.promptOptimization && optimizedPrompt) {\n          caption += `${translate('prompt_generation_model', language)}: ${config.externalModel || 'Unknown'}\\n`;\n          caption += `${translate('optimized_prompt', language)}: ${optimizedPrompt}\\n`;\n        }\n\n        await bot.sendPhoto(chatId, imageData, { caption: caption });\n      } catch (error) {\n        console.error(`Error generating Flux image for user ${userId}:`, error);\n        if (error instanceof Error) {\n          console.error('Error details:', error.message);\n        }\n        await bot.sendMessage(chatId, translate('image_generation_error', language));\n      }\n    },\n  },\n];\n", "import { Env, getConfig } from '../env';\r\n\r\ninterface RedisResponse {\r\n  result: string | null;\r\n}\r\n\r\nexport class RedisClient {\r\n  private url: string;\r\n  private token: string;\r\n  private config: ReturnType<typeof getConfig>;\r\n\r\n  constructor(env: Env) {\r\n    this.config = getConfig(env);\r\n    this.url = this.config.upstashRedisRestUrl;\r\n    this.token = this.config.upstashRedisRestToken;\r\n  }\r\n\r\n  async get(key: string): Promise<string | null> {\r\n    const response = await fetch(`${this.url}/get/${key}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${this.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        return null;\r\n      }\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json() as RedisResponse;\r\n    return data.result;\r\n  }\r\n\r\n  async set(key: string, value: string, ttl?: number): Promise<void> {\r\n    const url = ttl\r\n      ? `${this.url}/set/${key}/${value}?EX=${ttl}`\r\n      : `${this.url}/set/${key}/${value}`;\r\n\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${this.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n  }\r\n\r\n  async del(key: string): Promise<void> {\r\n    const response = await fetch(`${this.url}/del/${key}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${this.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n  }\r\n\r\n  async setLanguage(userId: string, language: string): Promise<void> {\r\n    await this.set(`language:${userId}`, language, this.config.languageTTL);\r\n  }\r\n\r\n  async appendContext(userId: string, newContext: string): Promise<void> {\r\n    const key = `context:${userId}`;\r\n    const existingContext = await this.get(key);\r\n    const updatedContext = existingContext\r\n      ? `${existingContext}\\n${newContext}`\r\n      : newContext;\r\n    await this.set(key, updatedContext, this.config.contextTTL);\r\n  }\r\n\r\n  async getAllUserLanguages(): Promise<Record<string, string>> {\r\n    const keys = await this.keys('language:*');\r\n    const userLanguages: Record<string, string> = {};\r\n\r\n    for (const key of keys) {\r\n      const userId = key.split(':')[1];\r\n      const language = await this.get(key);\r\n      if (language) {\r\n        userLanguages[userId] = language;\r\n      }\r\n    }\r\n\r\n    return userLanguages;\r\n  }\r\n\r\n  async keys(pattern: string): Promise<string[]> {\r\n    const response = await fetch(`${this.url}/keys/${pattern}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${this.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json() as { result: string[] };\r\n    return data.result;\r\n  }\r\n}", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\nimport { Message } from './openai_api';\n\ninterface GeminiResponse {\n  candidates: Array<{\n    content: {\n      parts: Array<{\n        text: string;\n      }>;\n    };\n  }>;\n}\n\ninterface GeminiMessage {\n  role: 'user' | 'model';\n  parts: Array<{ text: string }>;\n}\n\nexport class GeminiAPI implements ModelAPIInterface {\n  private apiKey: string;\n  private baseUrl: string;\n  private models: string[];\n  private defaultModel: string;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiKey = config.googleModelKey;\n    this.baseUrl = config.googleModelBaseUrl || 'https://generativelanguage.googleapis.com/v1beta';\n    this.models = config.googleModels;\n    this.defaultModel = this.models[0];\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    const useModel = model || this.defaultModel;\n    const url = `${this.baseUrl}/models/${useModel}:generateContent?key=${this.apiKey}`;\n\n    const geminiMessages: GeminiMessage[] = messages\n      .filter(msg => msg.role !== 'system')\n      .map(msg => ({\n        role: msg.role === 'assistant' ? 'model' : 'user',\n        parts: [{ text: msg.content }]\n      }));\n\n    const requestBody = {\n      contents: geminiMessages,\n      generationConfig: {\n        temperature: 0.7,\n        topP: 1,\n        topK: 1,\n        maxOutputTokens: 2048,\n      },\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Gemini API error: ${response.statusText}`, errorText);\n      throw new Error(`Gemini API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data: GeminiResponse = await response.json();\n    if (!data.candidates || data.candidates.length === 0) {\n      throw new Error('No response generated from Gemini API');\n    }\n    return data.candidates[0].content.parts[0].text.trim();\n  }\n\n  isValidModel(model: string): boolean {\n    return this.models.includes(model);\n  }\n\n  getDefaultModel(): string {\n    return this.defaultModel;\n  }\n\n  getAvailableModels(): string[] {\n    return this.models;\n  }\n}\nexport default GeminiAPI;\n", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\nimport { Message } from './openai_api';\n\ninterface GroqResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nexport class GroqAPI implements ModelAPIInterface {\n  private apiKey: string;\n  private baseUrl: string = 'https://api.groq.com/openai/v1';\n  private models: string[];\n  private defaultModel: string;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiKey = config.groqApiKey;\n    this.models = config.groqModels;\n    this.defaultModel = this.models[0];\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    const useModel = model || this.defaultModel;\n    const url = `${this.baseUrl}/chat/completions`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: useModel,\n        messages: messages,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Groq API error: ${response.statusText}`, errorText);\n      throw new Error(`Groq API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data: GroqResponse = await response.json();\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No response generated from Groq API');\n    }\n    return data.choices[0].message.content.trim();\n  }\n\n  isValidModel(model: string): boolean {\n    return this.models.includes(model);\n  }\n\n  getDefaultModel(): string {\n    return this.defaultModel;\n  }\n\n  getAvailableModels(): string[] {\n    return this.models;\n  }\n}\nexport default GroqAPI;\n", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\nimport { Message } from './openai_api';\n\ninterface ClaudeResponse {\n  content: Array<{\n    text: string;\n  }>;\n}\n\nexport class ClaudeAPI implements ModelAPIInterface {\n  private apiKey: string;\n  private baseUrl: string;\n  private models: string[];\n  private defaultModel: string;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiKey = config.claudeApiKey;\n    this.baseUrl = config.claudeEndpoint || 'https://api.anthropic.com/v1';\n    this.models = config.claudeModels;\n    this.defaultModel = this.models[0];\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    const useModel = model || this.defaultModel;\n    const url = `${this.baseUrl}/messages`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': this.apiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify({\n        model: useModel,\n        messages: messages.map(msg => ({\n          role: msg.role === 'assistant' ? 'assistant' : 'user',\n          content: msg.content\n        })),\n        max_tokens: 1000\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Claude API error: ${response.statusText}`, errorText);\n      throw new Error(`Claude API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data: ClaudeResponse = await response.json();\n    if (!data.content || data.content.length === 0) {\n      throw new Error('No response generated from Claude API');\n    }\n    const generatedText = data.content[0].text.trim();\n    return generatedText;\n  }\n\n  isValidModel(model: string): boolean {\n    return this.models.includes(model);\n  }\n\n  getDefaultModel(): string {\n    return this.defaultModel;\n  }\n\n  getAvailableModels(): string[] {\n    return this.models;\n  }\n}\n\nexport default ClaudeAPI;", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\nimport { Message } from './openai_api';\n\ninterface AzureChatCompletionResponse {\n  id: string;\n  object: string;\n  created: number;\n  choices: Array<{\n    index: number;\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n}\n\nexport class AzureAPI implements ModelAPIInterface {\n  private apiKey: string;\n  private baseUrl: string;\n  private models: string[];\n  private defaultModel: string;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.apiKey = config.azureApiKey;\n    this.baseUrl = config.azureEndpoint;\n    this.models = config.azureModels;\n    this.defaultModel = this.models[0];\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    const useModel = model || this.defaultModel;\n    const url = `${this.baseUrl}/openai/deployments/${useModel}/chat/completions?api-version=2024-02-01`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'api-key': this.apiKey,\n      },\n      body: JSON.stringify({\n        messages: messages,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Azure API error: ${response.statusText}`, errorText);\n      throw new Error(`Azure API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data: AzureChatCompletionResponse = await response.json();\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('Azure API \u672A\u751F\u6210\u4EFB\u4F55\u54CD\u5E94');\n    }\n    return data.choices[0].message.content.trim();\n  }\n\n  isValidModel(model: string): boolean {\n    return this.models.includes(model);\n  }\n\n  getDefaultModel(): string {\n    return this.defaultModel;\n  }\n\n  getAvailableModels(): string[] {\n    return this.models;\n  }\n}\n\nexport default AzureAPI;", "import { Env, getConfig } from '../env';\nimport { ModelAPIInterface } from './model_api_interface';\nimport { Message } from './openai_api';\nimport OpenAICompatibleAPI from './openai_compatible';\n\ninterface OpenAIImageAnalysisResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\ninterface GeminiImageAnalysisResponse {\n  candidates: Array<{\n    content: {\n      parts: Array<{\n        text: string;\n      }>;\n    };\n  }>;\n}\n\ntype ImageAnalysisResponse = OpenAIImageAnalysisResponse | GeminiImageAnalysisResponse;\n\nexport class ImageAnalysisAPI implements ModelAPIInterface {\n  private openaiApiKey: string;\n  private openaiBaseUrl: string;\n  private openaiModels: string[];\n  private googleApiKey: string;\n  private googleBaseUrl: string;\n  private googleModels: string[];\n  private openaiCompatibleApi: OpenAICompatibleAPI;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.openaiApiKey = config.openaiApiKey;\n    this.openaiBaseUrl = config.openaiBaseUrl;\n    this.openaiModels = config.openaiModels;\n    this.googleApiKey = config.googleModelKey;\n    this.googleBaseUrl = config.googleModelBaseUrl;\n    this.googleModels = config.googleModels;\n    this.openaiCompatibleApi = new OpenAICompatibleAPI(env);\n  }\n\n  async analyzeImage(imageUrl: string, prompt: string, model: string): Promise<string> {\n    if (this.openaiModels.includes(model)) {\n      return this.analyzeImageWithOpenAI(imageUrl, prompt, model);\n    } else if (this.googleModels.includes(model)) {\n      return this.analyzeImageWithGemini(imageUrl, prompt, model);\n    } else {\n      // \u5C1D\u8BD5\u4F7F\u7528 OpenAI Compatible API\n      const compatibleModels = await this.openaiCompatibleApi.getModels();\n      if (compatibleModels.includes(model) || compatibleModels.length > 0) {\n        return this.openaiCompatibleApi.analyzeImage(imageUrl, prompt, model);\n      }\n      throw new Error(`Invalid model for image analysis: ${model}`);\n    }\n  }\n\n  private async analyzeImageWithOpenAI(imageUrl: string, prompt: string, model: string): Promise<string> {\n    const url = `${this.openaiBaseUrl}/chat/completions`;\n    console.log(`Analyzing image with OpenAI. Model: ${model}, URL: ${imageUrl}`);\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.openaiApiKey}`,\n      },\n      body: JSON.stringify({\n        model: model,\n        messages: [\n          {\n            role: 'user',\n            content: [\n              { type: 'text', text: prompt },\n              { type: 'image_url', image_url: { url: imageUrl } }\n            ]\n          }\n        ],\n        max_tokens: 300\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`OpenAI API error: ${response.statusText}`, errorText);\n      throw new Error(`OpenAI image analysis API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data = await response.json() as OpenAIImageAnalysisResponse;\n    console.log('OpenAI API response:', JSON.stringify(data, null, 2));\n\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No response generated from OpenAI API');\n    }\n\n    const content = data.choices[0].message?.content;\n    if (!content) {\n      throw new Error('No content in OpenAI API response');\n    }\n\n    return content.trim();\n  }\n\n  private async analyzeImageWithGemini(imageUrl: string, prompt: string, model: string): Promise<string> {\n    const url = `${this.googleBaseUrl}/models/${model}:generateContent?key=${this.googleApiKey}`;\n    console.log(`Analyzing image with Gemini. Model: ${model}, URL: ${imageUrl}`);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [\n            { text: prompt },\n            { inlineData: { mimeType: 'image/jpeg', data: await this.getBase64Image(imageUrl) } }\n          ]\n        }]\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Gemini API error: ${response.statusText}`, errorText);\n      throw new Error(`Gemini image analysis API error: ${response.statusText}\\n${errorText}`);\n    }\n\n    const data = await response.json() as GeminiImageAnalysisResponse;\n    console.log('Gemini API response:', JSON.stringify(data, null, 2));\n\n    if (!data.candidates || data.candidates.length === 0) {\n      throw new Error('No response generated from Gemini API');\n    }\n\n    const content = data.candidates[0].content.parts[0].text;\n    if (!content) {\n      throw new Error('No content in Gemini API response');\n    }\n\n    return content.trim();\n  }\n\n  private async getBase64Image(imageUrl: string): Promise<string> {\n    const response = await fetch(imageUrl);\n    const arrayBuffer = await response.arrayBuffer();\n    const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n    return base64;\n  }\n\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\n    throw new Error('Method not implemented for image analysis.');\n  }\n\n  isValidModel(model: string): boolean {\n    return this.openaiModels.includes(model) || \n           this.googleModels.includes(model) || \n           this.openaiCompatibleApi.isValidModel(model);\n  }\n\n  getDefaultModel(): string {\n    return this.openaiModels[0] || this.googleModels[0] || this.openaiCompatibleApi.getDefaultModel();\n  }\n\n  getAvailableModels(): string[] {\n    return [...this.openaiModels, ...this.googleModels, ...this.openaiCompatibleApi.getAvailableModels()];\n  }\n}\n\nexport default ImageAnalysisAPI;\n", "import { Env, getConfig } from '../env';\nimport { TelegramTypes } from '../../types/telegram';\nimport OpenAIAPI, { Message } from './openai_api';\nimport { formatCodeBlock, escapeMarkdown, sendChatAction, splitMessage } from '../utils/helpers';\nimport { translate, SupportedLanguages, Translations } from '../utils/i18n';\nimport { commands, Command } from '../config/commands';\nimport { RedisClient } from '../utils/redis';\nimport { ModelAPIInterface } from './model_api_interface';\nimport GeminiAPI from './gemini';\nimport GroqAPI from './groq';\nimport ClaudeAPI from './claude';\nimport AzureAPI from './azure';\nimport ImageAnalysisAPI from './image_analyze';\nimport OpenAICompatibleAPI from './openai_compatible';\n\nexport class TelegramBot {\n  private token: string;\n  private apiUrl: string;\n  private whitelistedUsers: string[];\n  private systemMessage: string;\n  private env: Env;\n  private commands: Command[];\n  private redis: RedisClient;\n  private modelAPI: ModelAPIInterface;\n\n  constructor(env: Env) {\n    const config = getConfig(env);\n    this.token = config.telegramBotToken;\n    this.apiUrl = `https://api.telegram.org/bot${this.token}`;\n    this.whitelistedUsers = config.whitelistedUsers;\n    this.systemMessage = config.systemInitMessage;\n    this.env = env;\n    this.commands = commands;\n    this.redis = new RedisClient(env);\n    this.modelAPI = new OpenAIAPI(env);\n    this.setMenuButton().catch(console.error);\n  }\n\n  private async initializeModelAPI(userId: string): Promise<ModelAPIInterface> {\n    const currentModel = await this.getCurrentModel(userId);\n    console.log(`Initializing API for model: ${currentModel}`);\n    \n    const config = getConfig(this.env);\n    \n    // \u68C0\u67E5\u5176\u4ED6 API\n    if (config.openaiApiKey && config.openaiModels.includes(currentModel)) {\n      console.log('Using OpenAIAPI');\n      return new OpenAIAPI(this.env);\n    } else if (config.googleModelKey && config.googleModels.includes(currentModel)) {\n      console.log('Using GeminiAPI');\n      return new GeminiAPI(this.env);\n    } else if (config.groqApiKey && config.groqModels.includes(currentModel)) {\n      console.log('Using GroqAPI');\n      return new GroqAPI(this.env);\n    } else if (config.claudeApiKey && config.claudeModels.includes(currentModel)) {\n      console.log('Using ClaudeAPI');\n      return new ClaudeAPI(this.env);\n    } else if (config.azureApiKey && config.azureModels.includes(currentModel)) {\n      console.log('Using AzureAPI');\n      return new AzureAPI(this.env);\n    }\n    \n    // \u5982\u679C\u5176\u4ED6 API \u90FD\u4E0D\u5339\u914D\uFF0C\u5C1D\u8BD5\u4F7F\u7528 OpenAI Compatible API\n    if (config.openaiCompatibleUrl) {\n      const compatibleApi = new OpenAICompatibleAPI(this.env);\n      const compatibleModels = await compatibleApi.getModels();\n      if (compatibleModels.includes(currentModel) || compatibleModels.length > 0) {\n        console.log('Using OpenAICompatibleAPI');\n        return compatibleApi;\n      }\n    }\n    \n    // \u5982\u679C\u6240\u6709 API \u90FD\u4E0D\u5339\u914D\uFF0C\u629B\u51FA\u9519\u8BEF\n    throw new Error(`No valid API configuration found for model: ${currentModel}`);\n  }\n\n  public async executeCommand(commandName: string, chatId: number, args: string[]): Promise<void> {\n    const command = this.commands.find(cmd => cmd.name === commandName);\n    if (command) {\n      await command.action(chatId, this, args);\n    } else {\n      console.log(`Unknown command: ${commandName}`);\n      const language = await this.getUserLanguage(chatId.toString());\n      await this.sendMessage(chatId, translate('command_not_found', language));\n    }\n  }\n\n  async sendMessage(chatId: number, text: string, options: { parse_mode?: 'Markdown' | 'HTML', reply_markup?: string } = {}): Promise<TelegramTypes.SendMessageResult[]> {\n    const messages = splitMessage(text);\n    const results: TelegramTypes.SendMessageResult[] = [];\n\n    for (const message of messages) {\n      const url = `${this.apiUrl}/sendMessage`;\n      console.log(`Sending message part (length: ${message.length})`);\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chat_id: chatId,\n            text: message,\n            parse_mode: options.parse_mode,\n            reply_markup: options.reply_markup,\n          }),\n        });\n\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`Telegram API error: ${response.statusText}`, errorText);\n          throw new Error(`Telegram API error: ${response.statusText}\\n${errorText}`);\n        }\n\n        const result = await response.json() as TelegramTypes.SendMessageResult;\n        results.push(result);\n      } catch (error) {\n        console.error('Error sending message part:', error);\n        throw error;\n      }\n    }\n\n    return results;\n  }\n\n  async handleUpdate(update: TelegramTypes.Update): Promise<void> {\n    if (update.callback_query) {\n      await this.handleCallbackQuery(update.callback_query);\n    } else if (update.message) {\n      const chatId = update.message.chat.id;\n      const userId = update.message.from?.id?.toString();\n      if (!userId) {\n        console.error('User ID is undefined');\n        return;\n      }\n      const language = await this.getUserLanguage(userId);\n\n      if (this.isUserWhitelisted(userId)) {\n        if ('photo' in update.message && Array.isArray(update.message.photo) && update.message.photo.length > 0) {\n          await this.handleImageAnalysis(chatId, update.message as TelegramTypes.Message & { photo: TelegramTypes.PhotoSize[] }, language);\n        } else if (update.message.text) {\n          if (update.message.text.startsWith('/')) {\n            const [commandName, ...args] = update.message.text.slice(1).split(' ');\n            await this.executeCommand(commandName, chatId, args);\n          } else {\n            try {\n              await sendChatAction(chatId, 'typing', this.env);\n              this.modelAPI = await this.initializeModelAPI(userId);\n              const context = await this.getContext(userId);\n              const currentModel = await this.getCurrentModel(userId);\n\n              let messages: Message[] = [];\n              if (currentModel.startsWith('gemini-')) {\n                messages = [\n                  ...(context ? [{ role: 'user' as const, content: context }] : []),\n                  { role: 'user' as const, content: update.message.text }\n                ];\n              } else {\n                messages = [\n                  { role: 'system' as const, content: this.systemMessage },\n                  ...(context ? [{ role: 'user' as const, content: context }] : []),\n                  { role: 'user' as const, content: update.message.text }\n                ];\n              }\n\n              const response = await this.modelAPI.generateResponse(messages, currentModel);\n              const formattedResponse = this.formatResponse(response);\n\n              await this.sendMessageWithFallback(chatId, formattedResponse);\n\n              await this.storeContext(userId, `User: ${update.message.text}\\nAssistant: ${response}`);\n            } catch (error) {\n              console.error('Error in handleUpdate:', error);\n              // \u4E0D\u5411\u7528\u6237\u53D1\u9001\u9519\u8BEF\u6D88\u606F\uFF0C\u53EA\u8BB0\u5F55\u65E5\u5FD7\n            }\n          }\n        }\n      } else {\n        await this.sendMessageWithFallback(chatId, translate('unauthorized', language));\n      }\n    }\n  }\n\n  private async handleCallbackQuery(query: TelegramTypes.CallbackQuery): Promise<void> {\n    if (!query.message || !query.data) {\n      console.log('Invalid callback query');\n      return;\n    }\n\n    const chatId = query.message.chat.id;\n    const userId = query.from.id.toString();\n    const language = await this.getUserLanguage(userId);\n\n    console.log('Handling callback query:', query.data);\n\n    if (query.data.startsWith('lang_')) {\n      const newLanguage = query.data.split('_')[1] as SupportedLanguages;\n      await this.setUserLanguage(userId, newLanguage);\n      await this.sendMessageWithFallback(chatId, translate('language_changed', newLanguage) + translate(`language_${newLanguage}` as keyof Translations, newLanguage));\n    } else if (query.data.startsWith('model_')) {\n      const newModel = query.data.split('_')[1];\n      console.log('Switching to model:', newModel);\n      try {\n        await this.setCurrentModel(userId, newModel);\n        await this.sendMessageWithFallback(chatId, translate('model_changed', language) + newModel);\n        await this.clearContext(userId);\n      } catch (error) {\n        console.error('Error switching model:', error);\n        await this.sendMessageWithFallback(chatId, translate('error', language) + ': ' + (error instanceof Error ? error.message : 'Unknown error'));\n      }\n    }\n\n    // Answer the callback query to remove the loading state\n    try {\n      await fetch(`${this.apiUrl}/answerCallbackQuery`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ callback_query_id: query.id })\n      });\n      console.log('Callback query answered');\n    } catch (error) {\n      console.error('Error answering callback query:', error);\n    }\n  }\n\n  private async handleImageAnalysis(chatId: number, message: TelegramTypes.Message & { photo: TelegramTypes.PhotoSize[] }, language: SupportedLanguages): Promise<void> {\n    if (!message.photo || message.photo.length === 0) {\n      await this.sendMessageWithFallback(chatId, translate('image_analysis_error', language));\n      return;\n    }\n\n    const fileId = message.photo[message.photo.length - 1].file_id;\n    const caption = 'caption' in message ? message.caption || '' : '';\n\n    try {\n      await sendChatAction(chatId, 'typing', this.env);\n\n      const fileUrl = await this.getFileUrl(fileId);\n\n      const currentModel = await this.getCurrentModel(chatId.toString());\n      const config = getConfig(this.env);\n\n      let imageAnalysisAPI: ModelAPIInterface & { analyzeImage: (imageUrl: string, prompt: string, model: string) => Promise<string> };\n\n      if (config.openaiModels.includes(currentModel)) {\n        imageAnalysisAPI = new ImageAnalysisAPI(this.env) as any;\n      } else if (config.googleModels.includes(currentModel)) {\n        imageAnalysisAPI = new ImageAnalysisAPI(this.env) as any;\n      } else {\n        const openaiCompatibleAPI = new OpenAICompatibleAPI(this.env);\n        const compatibleModels = await openaiCompatibleAPI.getModels();\n        if (compatibleModels.includes(currentModel)) {\n          imageAnalysisAPI = openaiCompatibleAPI as any;\n        } else {\n          await this.sendMessageWithFallback(chatId, translate('image_analysis_not_supported', language));\n          return;\n        }\n      }\n\n      if (!imageAnalysisAPI.analyzeImage) {\n        await this.sendMessageWithFallback(chatId, translate('image_analysis_not_supported', language));\n        return;\n      }\n\n      const analysisResult = await imageAnalysisAPI.analyzeImage(fileUrl, caption, currentModel);\n\n      await this.sendMessageWithFallback(chatId, analysisResult);\n    } catch (error) {\n      console.error('Error in image analysis:', error);\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n      await this.sendMessage(chatId, translate('image_analysis_error', language) + ': ' + errorMessage);\n    }\n  }\n\n  private async getFileUrl(fileId: string): Promise<string> {\n    const response = await fetch(`https://api.telegram.org/bot${this.token}/getFile?file_id=${fileId}`);\n    const data: { ok: boolean; result: { file_path: string } } = await response.json();\n    if (data.ok) {\n      return `https://api.telegram.org/file/bot${this.token}/${data.result.file_path}`;\n    }\n    throw new Error('Failed to get file URL');\n  }\n\n\n  async getUserLanguage(userId: string): Promise<SupportedLanguages> {\n    const language = await this.redis.get(`language:${userId}`);\n    return (language as SupportedLanguages) || 'en';\n  }\n\n  async setUserLanguage(userId: string, language: SupportedLanguages): Promise<void> {\n    await this.redis.setLanguage(userId, language);\n  }\n\n  async getCurrentModel(userId: string): Promise<string> {\n    const model = await this.redis.get(`model:${userId}`);\n    if (model) {\n      return model;\n    }\n    \n    const config = getConfig(this.env);\n    \n    // \u6309\u4F18\u5148\u7EA7\u8FD4\u56DE\u9ED8\u8BA4\u6A21\u578B\n    if (config.openaiModels.length > 0) return config.openaiModels[0];\n    if (config.googleModels.length > 0) return config.googleModels[0];\n    if (config.groqModels.length > 0) return config.groqModels[0];\n    if (config.claudeModels.length > 0) return config.claudeModels[0];\n    if (config.azureModels.length > 0) return config.azureModels[0];\n    \n    // \u5982\u679C\u5176\u4ED6 API \u90FD\u6CA1\u6709\u914D\u7F6E\uFF0C\u5C1D\u8BD5\u4F7F\u7528 OpenAI Compatible API\n    if (config.openaiCompatibleUrl) {\n      const compatibleApi = new OpenAICompatibleAPI(this.env);\n      return compatibleApi.getDefaultModel();\n    }\n    \n    throw new Error('No valid model configuration found');\n  }\n\n  async setCurrentModel(userId: string, model: string): Promise<void> {\n    await this.redis.set(`model:${userId}`, model);\n    console.log(`Switching to model: ${model}`);\n    this.modelAPI = await this.initializeModelAPI(userId);\n  }\n\n  getAvailableModels(): string[] {\n    return this.modelAPI.getAvailableModels();\n  }\n\n  isValidModel(model: string): boolean {\n    return this.modelAPI.isValidModel(model);\n  }\n\n  async storeContext(userId: string, context: string): Promise<void> {\n    await this.redis.appendContext(userId, context);\n  }\n\n  async getContext(userId: string): Promise<string | null> {\n    return await this.redis.get(`context:${userId}`);\n  }\n\n  async clearContext(userId: string): Promise<void> {\n    await this.redis.del(`context:${userId}`);\n    const language = await this.getUserLanguage(userId);\n    await this.sendMessageWithFallback(parseInt(userId), translate('new_conversation', language));\n  }\n\n  async summarizeHistory(userId: string): Promise<string> {\n    this.modelAPI = await this.initializeModelAPI(userId);\n\n    const context = await this.getContext(userId);\n    const language = await this.getUserLanguage(userId);\n    if (!context) {\n      return translate('no_history', language);\n    }\n    const languageNames = {\n      'en': 'English',\n      'zh': 'Chinese',\n      'es': 'Spanish',\n      'zh-TW': 'Traditional Chinese',\n      'ja': 'Japanese',\n      'de': 'German',\n      'fr': 'French',\n      'ru': 'Russian'\n    };\n    const currentModel = await this.getCurrentModel(userId);\n    console.log(`Summarizing history with model: ${currentModel}`);\n\n    let messages: Message[];\n    if (currentModel.startsWith('gemini-')) {\n      messages = [\n        { role: 'user', content: `Please summarize the following conversation in ${languageNames[language]}:\\n\\n${context}` }\n      ];\n    } else {\n      messages = [\n        { role: 'system', content: `Summarize the following conversation in ${languageNames[language]}:` },\n        { role: 'user', content: context }\n      ];\n    }\n\n    const summary = await this.modelAPI.generateResponse(messages, currentModel);\n    return `${translate('history_summary', language)}\\n\\n${summary}`;\n  }\n\n  formatResponse(response: string): string {\n    const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]+?)```/g;\n    return response.replace(codeBlockRegex, (match, language, code) => {\n      return formatCodeBlock(code.trim(), language || '');\n    });\n  }\n\n  isUserWhitelisted(userId: string): boolean {\n    return this.whitelistedUsers.includes(userId);\n  }\n\n  async handleWebhook(request: Request): Promise<Response> {\n    if (request.method !== 'POST') {\n      return new Response('Method Not Allowed', { status: 405 });\n    }\n\n    try {\n      const update: TelegramTypes.Update = await request.json();\n      await this.handleUpdate(update);\n      return new Response('OK', { status: 200 });\n    } catch (error) {\n      console.error('Error processing webhook:', error);\n      return new Response('Internal Server Error', { status: 500 });\n    }\n  }\n\n  async sendPhoto(chatId: number, photo: string | Uint8Array, options: { caption?: string } = {}): Promise<void> {\n    const url = `${this.apiUrl}/sendPhoto`;\n    const formData = new FormData();\n    formData.append('chat_id', chatId.toString());\n\n    if (typeof photo === 'string') {\n      formData.append('photo', photo);\n    } else {\n      const blob = new Blob([photo], { type: 'image/png' });\n      formData.append('photo', blob, 'image.png');\n    }\n\n    if (options.caption) {\n      formData.append('caption', options.caption);\n    }\n\n    const response = await fetch(url, {\n      method: 'POST',\n      body: formData,\n    });\n\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  }\n\n  async setWebhook(url: string): Promise<void> {\n    const setWebhookUrl = `${this.apiUrl}/setWebhook`;\n    const response = await fetch(setWebhookUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to set webhook: ${response.statusText}`);\n    }\n\n    const result: { ok: boolean; description?: string } = await response.json();\n    if (!result.ok) {\n      throw new Error(`Telegram API error: ${result.description}`);\n    }\n  }\n\n  async sendMessageWithFallback(chatId: number, text: string): Promise<TelegramTypes.SendMessageResult[]> {\n    const currentModel = await this.getCurrentModel(chatId.toString());\n    const messages = this.splitMessage(text, 4000);\n    const results: TelegramTypes.SendMessageResult[] = [];\n\n    for (const message of messages) {\n      try {\n        let result;\n        if (currentModel.startsWith('gemini-')) {\n          // \u5BF9\u4E8E Gemini \u6A21\u578B\uFF0C\u5C1D\u8BD5\u4F7F\u7528 HTML \u683C\u5F0F\n          const htmlMessage = this.convertToHtml(message);\n          result = await this.sendMessage(chatId, htmlMessage, { parse_mode: 'HTML' });\n        } else {\n          // \u5BF9\u4E8E\u5176\u4ED6\u6A21\u578B\uFF0C\u5C1D\u8BD5\u4F7F\u7528 Markdown\n          result = await this.sendMessage(chatId, message, { parse_mode: 'Markdown' });\n        }\n        results.push(...result);\n        console.log(`Successfully sent message part (length: ${message.length})`);\n      } catch (error) {\n        console.error('Error sending formatted message:', error);\n        try {\n          // \u5982\u679C\u53D1\u9001\u5931\u8D25\uFF0C\u5C1D\u8BD5\u53D1\u9001\u7EAF\u6587\u672C\n          const plainTextResult = await this.sendMessage(chatId, this.stripFormatting(message));\n          results.push(...plainTextResult);\n          console.log(`Sent plain text message part (length: ${message.length})`);\n        } catch (fallbackError) {\n          console.error('Error sending plain text message:', fallbackError);\n        }\n      }\n    }\n\n    return results;\n  }\n\n  private convertToHtml(text: string): string {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<b>$1</b>')\n      .replace(/\\*(.*?)\\*/g, '<i>$1</i>')\n      .replace(/`(.*?)`/g, '<code>$1</code>')\n      .replace(/```([\\s\\S]*?)```/g, '<pre>$1</pre>')\n      .replace(/\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g, '<a href=\"$2\">$1</a>');\n  }\n\n  private stripFormatting(text: string): string {\n    return text\n      .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n      .replace(/\\*(.*?)\\*/g, '$1')\n      .replace(/`(.*?)`/g, '$1')\n      .replace(/```[\\s\\S]*?```/g, '')\n      .replace(/\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g, '$1 ($2)')\n      .replace(/<[^>]+>/g, '');\n  }\n\n  private splitMessage(text: string, maxLength: number = 4000): string[] {\n    const messages: string[] = [];\n    let currentMessage = '';\n\n    const lines = text.split('\\n');\n    for (const line of lines) {\n      if (currentMessage.length + line.length + 1 > maxLength) {\n        if (currentMessage) {\n          messages.push(currentMessage.trim());\n          currentMessage = '';\n        }\n        if (line.length > maxLength) {\n          const chunks = line.match(new RegExp(`.{1,${maxLength}}`, 'g')) || [];\n          messages.push(...chunks);\n        } else {\n          currentMessage = line;\n        }\n      } else {\n        currentMessage += (currentMessage ? '\\n' : '') + line;\n      }\n    }\n\n    if (currentMessage) {\n      messages.push(currentMessage.trim());\n    }\n\n    return messages;\n  }\n\n  private async setMenuButton(): Promise<void> {\n    const url = `${this.apiUrl}/setMyCommands`;\n    \n    const userLanguages = await this.redis.getAllUserLanguages();\n    \n    for (const [userId, lang] of Object.entries(userLanguages)) {\n      const commands = this.commands.map(cmd => ({\n        command: cmd.name,\n        description: translate(cmd.description, lang as SupportedLanguages)\n      }));\n\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            commands: commands,\n            scope: {\n              type: 'chat',\n              chat_id: parseInt(userId)\n            }\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to set menu button for user ${userId}: ${response.statusText}`);\n        }\n\n        console.log(`Menu button set successfully for user ${userId} with language: ${lang}`);\n      } catch (error) {\n        console.error(`Error setting menu button for user ${userId}:`, error);\n      }\n    }\n\n    const defaultCommands = this.commands.map(cmd => ({\n      command: cmd.name,\n      description: translate(cmd.description, 'en')\n    }));\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commands: defaultCommands\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to set default menu button: ${response.statusText}`);\n      }\n\n      console.log('Default menu button set successfully');\n    } catch (error) {\n      console.error('Error setting default menu button:', error);\n    }\n  }\n}\n\nexport default TelegramBot;\n", "import { Env } from './env';\r\nimport TelegramBot from './api/telegram';\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    const bot = new TelegramBot(env);\r\n    const url = new URL(request.url);\r\n\r\n    try {\r\n      if (url.pathname === '/webhook') {\r\n        return await bot.handleWebhook(request);\r\n      }\r\n\r\n      if (url.pathname === '/' || url.pathname === '') {\r\n        return new Response('Hello! This is your Telegram bot worker.', { \r\n          status: 200,\r\n          headers: { 'Content-Type': 'text/plain' }\r\n        });\r\n      }\r\n\r\n      return new Response('Not Found', { \r\n        status: 404,\r\n        headers: { 'Content-Type': 'text/plain' }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error processing request:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\r\n      return new Response(`Internal Server Error: ${errorMessage}`, { \r\n        status: 500,\r\n        headers: { 'Content-Type': 'text/plain' }\r\n      });\r\n    }\r\n  },\r\n};"],
  "mappings": "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",
  "names": ["commands"]
}
