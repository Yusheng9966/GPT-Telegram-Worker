{
  "version": 3,
  "sources": ["../src/env.ts", "../src/api/openai_api.ts", "../src/utils/helpers.ts", "../src/utils/i18n.ts", "../src/config/commands.ts", "../src/utils/redis.ts", "../src/api/telegram.ts", "../src/index.ts"],
  "sourceRoot": "dist",
  "sourcesContent": ["export interface Env {\r\n  OPENAI_API_KEY: string;\r\n  OPENAI_BASE_URL: string;\r\n  OPENAI_MODELS: string; // Comma-separated list of available OpenAI models\r\n  TELEGRAM_BOT_TOKEN: string;\r\n  WHITELISTED_USERS: string; // Comma-separated list of allowed Telegram user IDs\r\n  SYSTEM_INIT_MESSAGE: string;\r\n  SYSTEM_INIT_MESSAGE_ROLE: string;\r\n  DEFAULT_MODEL?: string; // Optional default model\r\n  UPSTASH_REDIS_REST_URL: string;\r\n  UPSTASH_REDIS_REST_TOKEN: string;\r\n}\r\n\r\nconst getEnvOrDefault = (env: Env, key: keyof Env, defaultValue: string): string => {\r\n  return (env[key] as string) || defaultValue;\r\n};\r\n\r\nexport const getConfig = (env: Env) => ({\r\n  openaiApiKey: env.OPENAI_API_KEY,\r\n  openaiBaseUrl: getEnvOrDefault(env, 'OPENAI_BASE_URL', 'https://api.openai.com/v1'),\r\n  openaiModels: env.OPENAI_MODELS.split(',').map(model => model.trim()),\r\n  telegramBotToken: env.TELEGRAM_BOT_TOKEN,\r\n  whitelistedUsers: env.WHITELISTED_USERS.split(',').map(id => id.trim()),\r\n  systemInitMessage: getEnvOrDefault(env, 'SYSTEM_INIT_MESSAGE', 'You are a helpful assistant.'),\r\n  systemInitMessageRole: getEnvOrDefault(env, 'SYSTEM_INIT_MESSAGE_ROLE', 'system'),\r\n  defaultModel: env.DEFAULT_MODEL,\r\n  upstashRedisRestUrl: env.UPSTASH_REDIS_REST_URL,\r\n  upstashRedisRestToken: env.UPSTASH_REDIS_REST_TOKEN,\r\n  // TTL \u914D\u7F6E\uFF08\u4EE5\u79D2\u4E3A\u5355\u4F4D\uFF09\r\n  languageTTL: 60 * 60 * 24 * 365, // 1 year\r\n  contextTTL: 60 * 60 * 24 * 30, // 30 days\r\n});", "import { Env, getConfig } from '../env';\r\nimport { ModelAPIInterface } from './model_api_interface';\r\n\r\nexport interface Message {\r\n  role: 'system' | 'user' | 'assistant';\r\n  content: string;\r\n}\r\n\r\ninterface ChatCompletionResponse {\r\n  id: string;\r\n  object: string;\r\n  created: number;\r\n  model: string;\r\n  choices: {\r\n    index: number;\r\n    message: Message;\r\n    finish_reason: string;\r\n  }[];\r\n  usage: {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n    total_tokens: number;\r\n  };\r\n}\r\n\r\nexport class OpenAIAPI implements ModelAPIInterface {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n  private models: string[];\r\n  private defaultModel: string;\r\n\r\n  constructor(env: Env) {\r\n    const config = getConfig(env);\r\n    this.apiKey = config.openaiApiKey;\r\n    this.baseUrl = config.openaiBaseUrl;\r\n    this.models = config.openaiModels;\r\n    this.defaultModel = config.defaultModel || this.models[0];\r\n  }\r\n\r\n  async generateResponse(messages: Message[], model?: string): Promise<string> {\r\n    const url = `${this.baseUrl}/chat/completions`;\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: model || this.defaultModel,\r\n        messages: messages,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`OpenAI API error: ${response.statusText}`);\r\n    }\r\n\r\n    const data: ChatCompletionResponse = await response.json();\r\n    return data.choices[0].message.content.trim();\r\n  }\r\n\r\n  isValidModel(model: string): boolean {\r\n    return this.models.includes(model);\r\n  }\r\n\r\n  getDefaultModel(): string {\r\n    return this.defaultModel;\r\n  }\r\n\r\n  getAvailableModels(): string[] {\r\n    return this.models;\r\n  }\r\n}\r\n\r\nexport default OpenAIAPI;", "import { Env } from '../env';\r\n\r\nexport function formatCodeBlock(code: string, language: string): string {\r\n  return `\\`\\`\\`${language}\\n${code}\\n\\`\\`\\``;\r\n}\r\n\r\nexport function splitMessage(text: string, maxLength: number = 4096): string[] {\r\n  const messages: string[] = [];\r\n  let currentMessage = '';\r\n\r\n  const lines = text.split('\\n');\r\n\r\n  for (const line of lines) {\r\n    if (currentMessage.length + line.length + 1 > maxLength) {\r\n      messages.push(currentMessage.trim());\r\n      currentMessage = '';\r\n    }\r\n    currentMessage += line + '\\n';\r\n  }\r\n\r\n  if (currentMessage.trim()) {\r\n    messages.push(currentMessage.trim());\r\n  }\r\n\r\n  return messages;\r\n}\r\n\r\nexport function escapeMarkdown(text: string): string {\r\n  const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];\r\n  return specialChars.reduce((acc, char) => acc.replace(new RegExp(`\\\\${char}`, 'g'), `\\\\${char}`), text);\r\n}\r\n\r\nexport async function sendChatAction(chatId: number, action: string, env: Env): Promise<void> {\r\n  const token = env.TELEGRAM_BOT_TOKEN;\r\n  const url = `https://api.telegram.org/bot${token}/sendChatAction`;\r\n  await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      chat_id: chatId,\r\n      action: action,\r\n    }),\r\n  });\r\n}", "export type SupportedLanguages = 'en' | 'zh' | 'es';\r\n\r\nexport interface Translations {\r\n  welcome: string;\r\n  unauthorized: string;\r\n  error: string;\r\n  current_language: string;\r\n  language_changed: string;\r\n  new_conversation: string;\r\n  no_history: string;\r\n  history_summary: string;\r\n  current_model: string;\r\n  available_models: string;\r\n  model_changed: string;\r\n  help_intro: string;\r\n  start_description: string;\r\n  language_description: string;\r\n  new_description: string;\r\n  history_description: string;\r\n  switchmodel_description: string;\r\n  help_description: string;\r\n  choose_language: string;\r\n  choose_model: string;\r\n  language_en: string;\r\n  language_zh: string;\r\n  language_es: string;\r\n}\r\n\r\nexport type TranslationKey = keyof Translations;\r\n\r\ntype TranslationsMap = Record<SupportedLanguages, Translations>;\r\n\r\nconst translations: TranslationsMap = {\r\n  en: {\r\n    welcome: \"Welcome to the GPT Telegram Bot!\",\r\n    unauthorized: \"Sorry, you're not authorized to use this bot.\",\r\n    error: \"An error occurred. Please try again.\",\r\n    current_language: \"Your current language is: English\",\r\n    language_changed: \"Language has been changed to: \",\r\n    new_conversation: \"Starting a new conversation. Previous context has been cleared.\",\r\n    no_history: \"No conversation history found.\",\r\n    history_summary: \"Here's a summary of your conversation history:\",\r\n    current_model: \"Your current model is: \",\r\n    available_models: \"Available models: \",\r\n    model_changed: \"Model has been changed to: \",\r\n    help_intro: \"Here are the available commands:\",\r\n    start_description: \"Start the bot\",\r\n    language_description: \"Set your preferred language\",\r\n    new_description: \"Start a new conversation\",\r\n    history_description: \"Summarize conversation history\",\r\n    switchmodel_description: \"Switch the current model\",\r\n    help_description: \"Show available commands and their descriptions\",\r\n    choose_language: \"Please choose your preferred language:\",\r\n    choose_model: \"Please choose a model:\",\r\n    language_en: \"English\",\r\n    language_zh: \"Chinese\",\r\n    language_es: \"Spanish\",\r\n  },\r\n  zh: {\r\n    welcome: \"\u6B22\u8FCE\u4F7F\u7528 GPT Telegram \u673A\u5668\u4EBA\uFF01\",\r\n    unauthorized: \"\u62B1\u6B49\uFF0C\u60A8\u65E0\u6743\u4F7F\u7528\u6B64\u673A\u5668\u4EBA\u3002\",\r\n    error: \"\u53D1\u751F\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002\",\r\n    current_language: \"\u60A8\u5F53\u524D\u7684\u8BED\u8A00\u662F\uFF1A\u4E2D\u6587\",\r\n    language_changed: \"\u8BED\u8A00\u5DF2\u66F4\u6539\u4E3A\uFF1A\",\r\n    new_conversation: \"\u5F00\u59CB\u65B0\u7684\u5BF9\u8BDD\u3002\u4E4B\u524D\u7684\u4E0A\u4E0B\u6587\u5DF2\u88AB\u6E05\u9664\u3002\",\r\n    no_history: \"\u672A\u627E\u5230\u5BF9\u8BDD\u5386\u53F2\u3002\",\r\n    history_summary: \"\u4EE5\u4E0B\u662F\u60A8\u7684\u5BF9\u8BDD\u5386\u53F2\u6458\u8981\uFF1A\",\r\n    current_model: \"\u60A8\u5F53\u524D\u4F7F\u7528\u7684\u6A21\u578B\u662F\uFF1A\",\r\n    available_models: \"\u53EF\u7528\u7684\u6A21\u578B\uFF1A\",\r\n    model_changed: \"\u6A21\u578B\u5DF2\u66F4\u6539\u4E3A\uFF1A\",\r\n    help_intro: \"\u4EE5\u4E0B\u662F\u53EF\u7528\u7684\u547D\u4EE4\uFF1A\",\r\n    start_description: \"\u542F\u52A8\u673A\u5668\u4EBA\",\r\n    language_description: \"\u8BBE\u7F6E\u60A8\u7684\u9996\u9009\u8BED\u8A00\",\r\n    new_description: \"\u5F00\u59CB\u65B0\u7684\u5BF9\u8BDD\",\r\n    history_description: \"\u603B\u7ED3\u5BF9\u8BDD\u5386\u53F2\",\r\n    switchmodel_description: \"\u5207\u6362\u5F53\u524D\u6A21\u578B\",\r\n    help_description: \"\u663E\u793A\u53EF\u7528\u547D\u4EE4\u53CA\u5176\u63CF\u8FF0\",\r\n    choose_language: \"\u8BF7\u9009\u62E9\u60A8\u504F\u597D\u7684\u8BED\u8A00\uFF1A\",\r\n    choose_model: \"\u8BF7\u9009\u62E9\u4E00\u4E2A\u6A21\u578B\uFF1A\",\r\n    language_en: \"\u82F1\u8BED\",\r\n    language_zh: \"\u4E2D\u6587\",\r\n    language_es: \"\u897F\u73ED\u7259\u8BED\",\r\n  },\r\n  es: {\r\n    welcome: \"\u00A1Bienvenido al bot de GPT en Telegram!\",\r\n    unauthorized: \"Lo siento, no est\u00E1s autorizado para usar este bot.\",\r\n    error: \"Ocurri\u00F3 un error. Por favor, int\u00E9ntalo de nuevo.\",\r\n    current_language: \"Tu idioma actual es: Espa\u00F1ol\",\r\n    language_changed: \"El idioma ha sido cambiado a: \",\r\n    new_conversation: \"Iniciando una nueva conversaci\u00F3n. El contexto anterior ha sido borrado.\",\r\n    no_history: \"No se encontr\u00F3 historial de conversaci\u00F3n.\",\r\n    history_summary: \"Aqu\u00ED tienes un resumen de tu historial de conversaci\u00F3n:\",\r\n    current_model: \"Tu modelo actual es: \",\r\n    available_models: \"Modelos disponibles: \",\r\n    model_changed: \"El modelo ha sido cambiado a: \",\r\n    help_intro: \"Estos son los comandos disponibles:\",\r\n    start_description: \"Iniciar el bot\",\r\n    language_description: \"Establecer tu idioma preferido\",\r\n    new_description: \"Iniciar una nueva conversaci\u00F3n\",\r\n    history_description: \"Resumir el historial de conversaci\u00F3n\",\r\n    switchmodel_description: \"Cambiar el modelo actual\",\r\n    help_description: \"Mostrar comandos disponibles y sus descripciones\",\r\n    choose_language: \"Por favor, elige tu idioma preferido:\",\r\n    choose_model: \"Por favor, elige un modelo:\",\r\n    language_en: \"Ingl\u00E9s\",\r\n    language_zh: \"Chino\",\r\n    language_es: \"Espa\u00F1ol\",\r\n  }\r\n};\r\n\r\nexport function translate(key: TranslationKey, language: SupportedLanguages = 'en'): string {\r\n  return translations[language][key] || translations['en'][key];\r\n}", "import { TelegramBot } from '../api/telegram';\r\nimport { translate, SupportedLanguages, TranslationKey } from '../utils/i18n';\r\n\r\nexport interface Command {\r\n  name: string;\r\n  description: string;\r\n  action: (chatId: number, bot: TelegramBot, args: string[]) => Promise<void>;\r\n}\r\n\r\nexport const commands: Command[] = [\r\n  {\r\n    name: 'start',\r\n    description: 'Start the bot',\r\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\r\n      const userId = chatId.toString();\r\n      const language = await bot.getUserLanguage(userId);\r\n      const currentModel = await bot.getCurrentModel(userId);\r\n      const welcomeMessage = translate('welcome', language) + '\\n' + \r\n                             translate('current_model', language) + currentModel;\r\n      await bot.sendMessage(chatId, welcomeMessage);\r\n    },\r\n  },\r\n  {\r\n    name: 'language',\r\n    description: 'Set your preferred language',\r\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\r\n      const userId = chatId.toString();\r\n      const currentLanguage = await bot.getUserLanguage(userId);\r\n      const keyboard = {\r\n        inline_keyboard: [\r\n          [\r\n            { text: '\uD83C\uDDFA\uD83C\uDDF8 English', callback_data: 'lang_en' },\r\n            { text: '\uD83C\uDDE8\uD83C\uDDF3 \u4E2D\u6587', callback_data: 'lang_zh' },\r\n            { text: '\uD83C\uDDEA\uD83C\uDDF8 Espa\u00F1ol', callback_data: 'lang_es' }\r\n          ]\r\n        ]\r\n      };\r\n      await bot.sendMessage(chatId, translate('choose_language', currentLanguage), { reply_markup: JSON.stringify(keyboard) });\r\n    },\r\n  },\r\n  {\r\n    name: 'switchmodel',\r\n    description: 'Switch the current model',\r\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\r\n      const userId = chatId.toString();\r\n      const language = await bot.getUserLanguage(userId);\r\n      const availableModels = bot.getAvailableModels();\r\n      const keyboard = {\r\n        inline_keyboard: availableModels.map(model => [{text: model, callback_data: `model_${model}`}])\r\n      };\r\n      await bot.sendMessage(chatId, translate('choose_model', language), { reply_markup: JSON.stringify(keyboard) });\r\n    },\r\n  },\r\n  {\r\n    name: 'new',\r\n    description: 'Start a new conversation',\r\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\r\n      const userId = chatId.toString();\r\n      await bot.clearContext(userId);\r\n    },\r\n  },\r\n  {\r\n    name: 'history',\r\n    description: 'Summarize conversation history',\r\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\r\n      const userId = chatId.toString();\r\n      const language = await bot.getUserLanguage(userId);\r\n      const summary = await bot.summarizeHistory(userId);\r\n      await bot.sendMessage(chatId, summary || translate('no_history', language));\r\n    },\r\n  },\r\n  {\r\n    name: 'help',\r\n    description: 'Show available commands and their descriptions',\r\n    action: async (chatId: number, bot: TelegramBot, args: string[]) => {\r\n      const userId = chatId.toString();\r\n      const language = await bot.getUserLanguage(userId);\r\n      let helpMessage = translate('help_intro', language) + '\\n\\n';\r\n      \r\n      for (const command of commands) {\r\n        const descriptionKey = `${command.name}_description` as TranslationKey;\r\n        helpMessage += `/${command.name} - ${translate(descriptionKey, language)}\\n`;\r\n      }\r\n      \r\n      await bot.sendMessage(chatId, helpMessage);\r\n    },\r\n  },\r\n];", "import { Env, getConfig } from '../env';\r\n\r\ninterface RedisResponse {\r\n  result: string | null;\r\n}\r\n\r\nexport class RedisClient {\r\n  private url: string;\r\n  private token: string;\r\n  private config: ReturnType<typeof getConfig>;\r\n\r\n  constructor(env: Env) {\r\n    this.config = getConfig(env);\r\n    this.url = this.config.upstashRedisRestUrl;\r\n    this.token = this.config.upstashRedisRestToken;\r\n  }\r\n\r\n  async get(key: string): Promise<string | null> {\r\n    const response = await fetch(`${this.url}/get/${key}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${this.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        return null;\r\n      }\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json() as RedisResponse;\r\n    return data.result;\r\n  }\r\n\r\n  async set(key: string, value: string, ttl?: number): Promise<void> {\r\n    const url = ttl\r\n      ? `${this.url}/set/${key}/${value}?EX=${ttl}`\r\n      : `${this.url}/set/${key}/${value}`;\r\n\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${this.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n  }\r\n\r\n  async del(key: string): Promise<void> {\r\n    const response = await fetch(`${this.url}/del/${key}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${this.token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n  }\r\n\r\n  async setLanguage(userId: string, language: string): Promise<void> {\r\n    await this.set(`language:${userId}`, language, this.config.languageTTL);\r\n  }\r\n\r\n  async appendContext(userId: string, newContext: string): Promise<void> {\r\n    const key = `context:${userId}`;\r\n    const existingContext = await this.get(key);\r\n    const updatedContext = existingContext\r\n      ? `${existingContext}\\n${newContext}`\r\n      : newContext;\r\n    await this.set(key, updatedContext, this.config.contextTTL);\r\n  }\r\n}", "import { Env, getConfig } from '../env';\r\nimport { TelegramTypes } from '../../types/telegram';\r\nimport OpenAIAPI, { Message } from './openai_api';\r\nimport { formatCodeBlock, escapeMarkdown, sendChatAction, splitMessage } from '../utils/helpers';\r\nimport { translate, SupportedLanguages } from '../utils/i18n';\r\nimport { commands, Command } from '../config/commands';\r\nimport { RedisClient } from '../utils/redis';\r\nimport { ModelAPIInterface } from './model_api_interface';\r\n\r\nexport class TelegramBot {\r\n  private token: string;\r\n  private apiUrl: string;\r\n  private whitelistedUsers: string[];\r\n  private systemMessage: string;\r\n  private env: Env;\r\n  private commands: Command[];\r\n  private redis: RedisClient;\r\n  private modelAPI: ModelAPIInterface;\r\n\r\n  constructor(env: Env) {\r\n    const config = getConfig(env);\r\n    this.token = config.telegramBotToken;\r\n    this.apiUrl = `https://api.telegram.org/bot${this.token}`;\r\n    this.whitelistedUsers = config.whitelistedUsers;\r\n    this.systemMessage = config.systemInitMessage;\r\n    this.env = env;\r\n    this.commands = commands;\r\n    this.redis = new RedisClient(env);\r\n    this.modelAPI = new OpenAIAPI(env);\r\n  }\r\n\r\n  public async executeCommand(commandName: string, chatId: number, args: string[]): Promise<void> {\r\n    const command = this.commands.find(cmd => cmd.name === commandName) as Command | undefined;\r\n    if (command) {\r\n      await command.action(chatId, this, args);\r\n    } else {\r\n      console.log(`Unknown command: ${commandName}`);\r\n    }\r\n  }\r\n\r\n  async sendMessage(chatId: number, text: string, options: { parse_mode?: 'Markdown' | 'HTML', reply_markup?: string } = {}): Promise<TelegramTypes.SendMessageResult[]> {\r\n    const messages = splitMessage(text);\r\n    const results: TelegramTypes.SendMessageResult[] = [];\r\n  \r\n    for (const message of messages) {\r\n      const url = `${this.apiUrl}/sendMessage`;\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          chat_id: chatId,\r\n          text: message,\r\n          parse_mode: options.parse_mode || 'Markdown',  // \u9ED8\u8BA4\u4F7F\u7528 Markdown\r\n          reply_markup: options.reply_markup,\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n  \r\n      const result = await response.json() as TelegramTypes.SendMessageResult;\r\n      results.push(result);\r\n    }\r\n  \r\n    return results;\r\n  }\r\n\r\n  async handleUpdate(update: TelegramTypes.Update): Promise<void> {\r\n    if (update.callback_query) {\r\n      await this.handleCallbackQuery(update.callback_query);\r\n    } else if (update.message && update.message.text) {\r\n      const chatId = update.message.chat.id;\r\n      const userId = update.message.from?.id?.toString();\r\n      if (!userId) {\r\n        console.error('User ID is undefined');\r\n        return;\r\n      }\r\n      const text = update.message.text;\r\n      const language = await this.getUserLanguage(userId);\r\n  \r\n      if (this.isUserWhitelisted(userId)) {\r\n        if (text.startsWith('/')) {\r\n          const [commandName, ...args] = text.slice(1).split(' ');\r\n          await this.executeCommand(commandName, chatId, args);\r\n        } else {\r\n          try {\r\n            await sendChatAction(chatId, 'typing', this.env);\r\n            const context = await this.getContext(userId);\r\n            const messages: Message[] = [\r\n              { role: 'system' as const, content: this.systemMessage },\r\n              ...(context ? [{ role: 'user' as const, content: context }] : []),\r\n              { role: 'user' as const, content: text }\r\n            ];\r\n            const response = await this.modelAPI.generateResponse(messages);\r\n            const formattedResponse = this.formatResponse(response);\r\n            await this.sendMessage(chatId, formattedResponse, { parse_mode: 'Markdown' });\r\n            await this.storeContext(userId, `User: ${text}\\nAssistant: ${response}`);\r\n          } catch (error) {\r\n            console.error('Error generating response:', error);\r\n            await this.sendMessage(chatId, translate('error', language), { parse_mode: 'Markdown' });\r\n          }\r\n        }\r\n      } else {\r\n        await this.sendMessage(chatId, translate('unauthorized', language), { parse_mode: 'Markdown' });\r\n      }\r\n    }\r\n  }\r\n\r\n  async handleCallbackQuery(callbackQuery: TelegramTypes.CallbackQuery): Promise<void> {\r\n    const chatId = callbackQuery.message?.chat.id;\r\n    const userId = callbackQuery.from.id.toString();\r\n    const data = callbackQuery.data;\r\n\r\n    if (!chatId || !data) return;\r\n\r\n    if (data.startsWith('lang_')) {\r\n      const newLanguage = data.split('_')[1] as SupportedLanguages;\r\n      await this.setUserLanguage(userId, newLanguage);\r\n      await this.sendMessage(chatId, translate('language_changed', newLanguage) + translate(`language_${newLanguage}`, newLanguage), { parse_mode: 'Markdown' });\r\n    } else if (data.startsWith('model_')) {\r\n      const newModel = data.split('_')[1];\r\n      await this.setCurrentModel(userId, newModel);\r\n      const language = await this.getUserLanguage(userId);\r\n      await this.sendMessage(chatId, translate('model_changed', language) + newModel, { parse_mode: 'Markdown' });\r\n      await this.clearContext(userId);\r\n    }\r\n\r\n    // Answer the callback query to remove the loading state\r\n    await fetch(`${this.apiUrl}/answerCallbackQuery`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ callback_query_id: callbackQuery.id })\r\n    });\r\n  }\r\n\r\n  async getUserLanguage(userId: string): Promise<SupportedLanguages> {\r\n    const language = await this.redis.get(`language:${userId}`);\r\n    return (language as SupportedLanguages) || 'en';\r\n  }\r\n\r\n  async setUserLanguage(userId: string, language: SupportedLanguages): Promise<void> {\r\n    await this.redis.setLanguage(userId, language);\r\n  }\r\n\r\n  async getCurrentModel(userId: string): Promise<string> {\r\n    const model = await this.redis.get(`model:${userId}`);\r\n    return model || this.modelAPI.getDefaultModel();\r\n  }\r\n\r\n  async setCurrentModel(userId: string, model: string): Promise<void> {\r\n    await this.redis.set(`model:${userId}`, model);\r\n  }\r\n\r\n  getAvailableModels(): string[] {\r\n    return this.modelAPI.getAvailableModels();\r\n  }\r\n\r\n  isValidModel(model: string): boolean {\r\n    return this.modelAPI.isValidModel(model);\r\n  }\r\n\r\n  async storeContext(userId: string, context: string): Promise<void> {\r\n    await this.redis.appendContext(userId, context);\r\n  }\r\n\r\n  async getContext(userId: string): Promise<string | null> {\r\n    return await this.redis.get(`context:${userId}`);\r\n  }\r\n\r\n  async clearContext(userId: string): Promise<void> {\r\n    await this.redis.del(`context:${userId}`);\r\n    const language = await this.getUserLanguage(userId);\r\n    await this.sendMessage(parseInt(userId), translate('new_conversation', language), { parse_mode: 'Markdown' });\r\n  }\r\n\r\n  async summarizeHistory(userId: string): Promise<string> {\r\n    const context = await this.getContext(userId);\r\n    const language = await this.getUserLanguage(userId);\r\n    if (!context) {\r\n      return translate('no_history', language);\r\n    }\r\n    const languageNames = {\r\n      'en': 'English',\r\n      'zh': 'Chinese',\r\n      'es': 'Spanish'\r\n    };\r\n    const messages: Message[] = [\r\n      { role: 'system' as const, content: `Summarize the following conversation in ${languageNames[language]}:` },\r\n      { role: 'user' as const, content: context }\r\n    ];\r\n    const summary = await this.modelAPI.generateResponse(messages);\r\n    return `${translate('history_summary', language)}\\n\\n${summary}`;\r\n  }\r\n\r\n  formatResponse(response: string): string {\r\n    const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]+?)```/g;\r\n    return response.replace(codeBlockRegex, (match, language, code) => {\r\n      return formatCodeBlock(code.trim(), language || '');\r\n    });\r\n  }\r\n\r\n  isUserWhitelisted(userId: string): boolean {\r\n    return this.whitelistedUsers.includes(userId);\r\n  }\r\n\r\n  async handleWebhook(request: Request): Promise<Response> {\r\n    if (request.method !== 'POST') {\r\n      return new Response('Method Not Allowed', { status: 405 });\r\n    }\r\n\r\n    try {\r\n      const update: TelegramTypes.Update = await request.json();\r\n      await this.handleUpdate(update);\r\n      return new Response('OK', { status: 200 });\r\n    } catch (error) {\r\n      console.error('Error processing webhook:', error);\r\n      return new Response('Internal Server Error', { status: 500 });\r\n    }\r\n  }\r\n\r\n  async setWebhook(url: string): Promise<void> {\r\n    const setWebhookUrl = `${this.apiUrl}/setWebhook`;\r\n    const response = await fetch(setWebhookUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ url }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to set webhook: ${response.statusText}`);\r\n    }\r\n\r\n    const result: { ok: boolean; description?: string } = await response.json();\r\n    if (!result.ok) {\r\n      throw new Error(`Telegram API error: ${result.description}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default TelegramBot;", "import { Env } from './env';\r\nimport TelegramBot from './api/telegram';\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    const bot = new TelegramBot(env);\r\n    const url = new URL(request.url);\r\n\r\n    console.log(`Received request for path: ${url.pathname}`);\r\n\r\n    try {\r\n      // Handle Telegram webhook\r\n      if (url.pathname === '/webhook') {\r\n        console.log('Processing webhook request');\r\n        return await bot.handleWebhook(request);\r\n      }\r\n\r\n      // Handle root path\r\n      if (url.pathname === '/' || url.pathname === '') {\r\n        console.log('Serving root path');\r\n        return new Response('Hello! This is your Telegram bot worker.', { \r\n          status: 200,\r\n          headers: { 'Content-Type': 'text/plain' }\r\n        });\r\n      }\r\n\r\n      // Handle all other requests\r\n      console.log('Path not found');\r\n      return new Response('Not Found', { \r\n        status: 404,\r\n        headers: { 'Content-Type': 'text/plain' }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error processing request:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\r\n      return new Response(`Internal Server Error: ${errorMessage}`, { \r\n        status: 500,\r\n        headers: { 'Content-Type': 'text/plain' }\r\n      });\r\n    }\r\n  },\r\n};"],
  "mappings": "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",
  "names": []
}
